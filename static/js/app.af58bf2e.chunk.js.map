{"version":3,"sources":["src/ui/contents/strings.js","src/ui/contents/locationsList.js","src/logic/newCasesData.js","src/logic/deathData.js","src/logic/recoveredData.js","src/logic/positiveDeltaData.js","src/utils/dateToString.js","src/logic/positiveRepartitionData.js","src/logic/totalCasesRepartitionData.js","src/logic/swabData.js","src/logic/dataRouter.js","src/logic/selectedLocation.js","src/logic/dataset.js","src/ui/contents/urls.js","src/logic/retrieveData.js","src/ui/theme/colors.js","src/ui/theme/darkModeDetector.js","src/ui/theme/legendColors.js","src/ui/theme/dimens.js","src/utils/dimensionsUtils.js","src/ui/theme/style.js","src/ui/components/loading/error.js","src/logic/retrieveRegionData.js","src/ui/components/loading/loading.js","src/utils/rootNavigationRef.js","src/logic/notesData.js","src/ui/components/latest_updates/notesComponent.js","src/ui/components/location_selector/locationSelector.js","src/ui/components/mainScrollableContainer.js","src/logic/latestUpdateData.js","src/ui/contents/params.js","src/data_representation/resume_cards/cardTotalCases.js","src/data_representation/resume_cards/cardRecovered.js","src/data_representation/resume_cards/cardDied.js","src/data_representation/resume_cards/cardCurrentPositive.js","src/data_representation/resume_cards/cardSwab.js","src/data_representation/resume_cards/cardDate.js","src/ui/components/latest_updates/latestUpateComponent.js","src/ui/components/header/headerMenuButton.js","src/ui/components/screenContainer.js","src/ui/screens/latestUpdateResumeScreen.js","src/utils/colorConverter.js","src/ui/contents/intervalSelectorData.js","src/logic/retrieveTimeLabels.js","src/data_representation/charts/lineChartDecorator.js","src/data_representation/charts/lineChart.js","src/ui/components/cards/lineChartCard.js","src/ui/components/new_cases/newCasesComponent.js","src/data_representation/charts/progressCircle.js","src/ui/screens/newCasesScreen.js","src/logic/currentPositiveData.js","src/data_representation/resume_cards/cardHomeQuarantine.js","src/data_representation/resume_cards/cardHospitalizedWithSymptoms.js","src/data_representation/resume_cards/cardCritical.js","src/data_representation/charts/chartColorLegend.js","src/data_representation/charts/stackedAreaChart.js","src/ui/components/current_positive/currentPositiveComponent.js","src/ui/screens/currentPositiveScreen.js","src/ui/components/recovered/recoveredComponent.js","src/ui/screens/recoveredScreen.js","src/data_representation/resume_cards/cardTestedCases.js","src/data_representation/resume_cards/cardStandardSwabs.js","src/data_representation/resume_cards/cardRapidSwabs.js","src/ui/components/swabs/swabsComponent.js","src/ui/screens/swabsScreen.js","src/ui/components/died/diedComponent.js","src/ui/screens/diedScreen.js","src/ui/components/repartition/repartitionComponent.js","src/ui/screens/dataRepartitionScreen.js","src/ui/contents/infoMenu.js","src/ui/components/info/infoComponent.js","src/utils/linking.js","src/ui/screens/infoScreen.js","src/ui/components/GlobalContainer.js","App.js","web-build/register-service-worker.js"],"names":["appInfo","uiButtons","loadingMessages","screenTitles","chartTitles","dataDescription","lastUpdate","totalCases","newCases","r0","screening","totalCasesRepartitionAbsolute","totalCasesRepartitionPercentage","totalCasesRegion","totalCasesPercentage","recoveredTotal","recoveredVariation","recoveredTrendProportional","diedTotal","diedVariation","diedTrendProportional","positiveTotal","positiveVariation","positiveRepartitionAbsolute","positiveRepartitionPercentage","positiveRepartition","criticalTrendAbsolute","positiveRegionTable","positiveCasesAreaPercentage","swapTrend","swabTrendVariation","testedCaseTrend","testedCasesTrendVariation","percentagePositiveTrend","showPercentage","infoMenuTitles","infoMenuDescriptions","RegionList","label","value","dataToReturn","percentageOfTotal","newCasesTrendAbsolute","newCasesTrendDayValue","r0Trend","NewCasesData","data","Records","getRecords","d","length","Math","round","toFixed","i","push","deathsRatio","diedTrendAbsolute","diedTrendDayValue","DeathsData","undefined","abs","recoveredRatio","recoveredTrendAbsolute","recoveredTrendDayValue","RecoveredData","deltaTrendAbsolute","deltaTrendDayVariation","homeQuarantine","homeQuarantinePercentage","homeQuarantineVariation","homeQuarantineVariationPercentage","hospitalized","hospitalizedPercentage","hospitalizedVariation","hospitalizedVariationPercentage","critical","criticalPercentage","criticalVariation","criticalVariationPercentage","PositiveDeltaData","toLocaleString","dateToString","date","tmp","split","repartitionPercentage","repartitionAbsolute","PositiveRepartitionData","repartition","TotalCasesRepartitionData","recovered","current","death","swabTrendAbsolute","testedCasesTrendAbsolute","positiveByScreening","SwabData","positiveRatio","DataRouter","refreshData","this","cleanData","SelectedLocation","index","setLocation","clearSingleRegionData","EventRegister","emit","getLocation","regionData","singleRegionData","setRecords","records","setRegionRecords","getRegionRecords","RemoteUrls","dashboard_covid_vaccine","national","regionsLatest","regions","donate","repository","contact","retrieveData","fetch","then","res","ok","Promise","reject","json","Colors","main","mainTransparent","basic","basicNotes","icons","navigationInactive","basicTransparent","basicShadow","background","title","borders","basicElevation","accent1","accent2","accent3","axis","bars","navigationOverlay","drawerSelectedText","drawerSelectedBackground","darkMode_main","darkMode_mainTransparent","darkMode_title","darkMode_basic","darkMode_basicNotesLight","darkMode_basicNotesText","darkMode_basicNotes","darkMode_icons","darkMode_navigationInactive","darkMode_basicTransparent","darkMode_basicShadow","darkMode_basicElevation","darkMode_background","darkMode_accent1","darkMode_accent2","darkMode_accent3","darkMode_axis","darkMode_bars","darkMode_drawerSelectedText","darkMode_drawerSelectedBackground","darkMode","Appearance","getColorScheme","LegendColors","green","yellow","red","grey","blue","teal","orange","purple","neutral","dimens","verySmallScreen","largeScreen","drawerWidth","chartMargin","headerHeight","headerLargeHeight","cardMargin","cardMarginSmallScreen","pieChartRadius","lineChartHeight","dynamicDimens","cardSmall","Dimensions","get","width","cardMedium","cardBig","chartFullWidth","styles","StyleSheet","create","root","backgroundColor","rootContainer","flex","alignItems","alignContent","justifyContent","scrollableContainer","flexDirection","flexWrap","marginBottom","loading","container","menuItemradius","paddingLeft","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","borderColor","header","borderBottomColor","borderBottomWidth","position","Platform","OS","top","left","headerTitle","color","headerShadow","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","cardGeneric","margin","padding","borderWidth","cardShadow","indicatorTitle","fontSize","fontWeight","indicatorValue","textAlign","indicatorValueBold","marginTop","indicatorValueIncr","fontStyle","indicatorLight","indicatorOrange","indicatorGreen","indicatorGrey","indicatorRed","chartTitle","chartDescription","chartManipulationDescription","infoDescription","marginLeft","marginRight","chartBigValue","legendExternalContainer","legendContainer","legendColorSquare","legendTitle","notesContainer","bottom","paddingTop","paddingBottom","borderTopColor","ErrorScreen","View","style","Text","Component","retrieveRegionData","LoadingComponent","ActivityIndicator","navigationRef","React","navigate","name","params","notes","NotesData","toUpperCase","replace","windowWidth","NotesComponent","props","duration","bounce","scroll","isInteraction","useNativeDriver","repeatSpacer","marqueeDelay","loop","isRTL","SafeAreaView","PureComponent","LocationSelector","state","location","items","placeholder","onValueChange","setState","doneText","pickerSelectStyles","fixAndroidTouchableBug","useNativeAndroidPickerStyle","inputWeb","fontFamily","SYSTEM_FONT_STACK","inputIOS","paddingVertical","paddingHorizontal","paddingRight","inputAndroid","MainScrollableContents","ScrollView","children","lastUpdateDate","totalCurrentCases","totalCasesVariationPercentage","currentCasesVariation","currentCasesVariationPercentage","totalRecovered","recoveredVariationPercentage","totalDeaths","deathsVariation","deathsVariationPercentage","swab","swabVariation","swabVariationPercentage","testedCases","testedCasesVariation","testedCasesVariationPercentage","rapidTestCumulative","standardTestCumulative","rapidTestVariation","standardTestVariation","latestUpdateData","standardTestVariationPercentage","rapidTestVariationPercentage","ShadowOpacity","CardTotalCases","lightred","CardRecovered","lightgreen","CardDied","CardCurrentPositive","CardSwab","lightblue","CardDate","LatestUpdateComponent","TouchableOpacity","onPress","colorScheme","HeaderLeft","navigation","useNavigation","dispatch","DrawerActions","openDrawer","Ionicons","size","dataChangedListener","Stack","createStackNavigator","dimensions","ScreenContainer","addEventListener","removeEventListener","Navigator","mode","Screen","options","headerStyle","headerTitleStyle","headerLeft","animationEnabled","component","LatestUpdateResumeScreen","hexToRgb","hex","result","exec","r","parseInt","g","b","intervalSelectorFilter","field","dateLabels","dateLabelsComplete","DateLabels","range","start","incr","lineChartNumLabels","LineChartDecorator","getXText","x","key","random","x1","y1","x2","y2","stroke","strokeWidth","cx","cy","y","fill","textAnchor","selectedDate","MyLineChart","decorator","visible","_1W","_1M","_MAX","completeDate","labels","datasets","slice","max","filter","forceUpdate","stateString","colorRGB","FlatList","renderItem","item","Chip","activateFilter","selected","textStyle","returnState","numColumns","horizontal","showsHorizontalScrollIndicator","keyExtractor","toString","yAxisLabel","yAxisSuffix","whitScrollableDot","withVerticalLines","yAxisInterval","chartConfig","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","opacity","labelColor","propsForDots","propsForBackgroundLines","marginVertical","onDataPointClick","LineChartCard","description","MyProgressCircle","tintColor","onAnimationComplete","console","log","NewCasesComponent","updateData","NewCasesScreen","CurrentPositiveData","CardHomeQuarantine","CardHospitalizedWithSymptoms","CardCritical","ChartColorLegend","MyStackAreaChart","colors","color1","color2","color3","deOpacizeColors","keys","keyValues","axesSvg","gridSvg","strokeDasharray","strokeOpacity","verticalContentInset","curve","shape","animationDuration","numberOfTicks","svg","direction","Grid","Direction","HORIZONTAL","belowChart","StackedAreaChart","extractDataPoints","contentInset","alignmentBaseline","baselineShift","formatLabel","right","legend","CurrentPositiveComponent","CurrentPositiveScreen","RecoveredComponent","light","RecoveredScreen","CardTestedCases","CardStandardSwabs","CardRapidSwabsSwabs","SwabsComponent","SwabsResumeScreen","DiedComponent","DiedScreen","RepartitionComponent","percentageForTotal","percentageForCurrent","totalChartTitle","totalChartDescription","positiveChartTitle","positiveChartDescription","Switch","totalSwitchChange","positiveSwitchChange","RepartitionScreen","menuLinks","icon","url","InfoComponent","Section","Subheader","map","Item","titleStyle","descriptionStyle","Linking","openURL","Icon","Divider","inset","InfoScreen","subscription","screenChange","Drawer","createDrawerNavigator","isLargeScreen","GlobalContainer","addChangeListener","Updates","reload","window","screen","remove","StatusBar","NavigationContainer","ref","initialRouteName","drawerContentOptions","activeTintColor","inactiveTintColor","activeBackgroundColor","drawerBackgroundColor","drawerType","drawerStyle","borderRightColor","overlayColor","App","promiseFn","err","isLoading","enableScreens","navigator","serviceWorker","register","scope","info","catch","error"],"mappings":"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","file":"static/js/app.af58bf2e.chunk.js","sourcesContent":["/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nexport const appInfo = {\n    name: 'Covid19 Dashboard',\n    version: '1.0.0 beta',\n    author: '@marinimau',\n    description: 'Covid-19 Italy è una dashboard realizzata dall\\'Università degli Studi di Cagliari per il monitoraggio e la visualizzazione dei dati riguardanti la pandemia Covid-19 nel territorio italiano.'\n};\n\nexport const uiButtons = {\n    done: 'Fatto'\n}\n\nexport const loadingMessages = {\n    loading: 'Caricamento...',\n    error: 'Qualcosa è andato storto, ricarica la pagina',\n    noNotes: 'Nessuna nota in data odierna',\n};\n\nexport const screenTitles = {\n    home: 'Home',\n    latestUpdateResume: 'Resoconto',\n    newCases: 'Casi Totali',\n    recovered: 'Guariti',\n    died: 'Deceduti',\n    currentPositive: 'Positivi Attuali',\n    swab: 'Tamponi',\n    repartition: 'Ripartizione',\n    info: 'Informazioni'\n};\n\n\nexport const chartTitles = {\n    locationSelectorPlaceholder: 'Cambia regione...',\n    allItaly: 'Tutta Italia',\n    lastUpdateDate: 'Dati del ',\n    regionsTable: 'Regione',\n    totalCasesRegionTable: 'Totale casi',\n    incrementTable: 'Variazione',\n    totalCasesCurve: 'Andamento casi totali',\n    totalCasesRepartionAbsolute: 'Ripartizione casi totali nel tempo (valore assoluto)',\n    totalCasesRepartionPercentage: 'Ripartizione casi totali nel tempo (percentuale)',\n    newCasesCurve: 'Andamento contagi giornalieri',\n    r0value: 'Valore R0',\n    r0Curve: 'Andamento parametro R0',\n    currentPositive: 'Positivi Attuali',\n    currentPositivePercentage: 'Percentuale positivi',\n    positivePercentageDescription: 'Percentuale di pazienti ancora positivi rispetto ai casi totali',\n    positiveTrendAbsolute: 'Andamento positivi (totale)',\n    positiveTrendVariation: 'Andamento positivi (varizione giornaliera)',\n    positiveRepartitionAbsolute: 'Ripartizione attualmente positivi nel tempo (valore assoluto)',\n    positiveRepartitionPercentage: 'Ripartizione attualmente positivi nel tempo (percentuale)',\n    positiveCasesAreaPercentage: 'Percentuale sul totale nazionale',\n    criticalTrendAbsolute: 'Andamento terapie intensive',\n    recovered: 'Guariti',\n    recoveredPercentage: 'Percentuale guariti',\n    recoveredPercentageDescription: 'Percentuale pazienti guariti rispetto ai casi totali',\n    recoveredTrend: 'Andamento guariti (totale)',\n    recoveredTrendDay: 'Andamento guariti (variazione giornaliera)',\n    recoveredTrendProportional: 'Andamento guariti (percentuale)',\n    recoveredRegionTable: 'Totale guariti',\n    died: 'Deceduti',\n    deathsRatio: 'Mortalità',\n    deathRatioDescription: 'Percentuale pazienti deceduti rispetto ai casi totali',\n    deathTrend: 'Andamento decessi (totale)',\n    deathTrendDay: 'Andamento decessi (variazione giornaliera)',\n    deathTrendProportional: 'Andamento mortalità',\n    deathRegionTotal: 'Totale deceduti',\n    totalCases: 'Casi totali',\n    totalCasesPercentage: 'Percentuale sul totale nazionale',\n    totalCasesRegion: 'Dati delle singole regioni',\n    totalCasesRegionVariation: 'Nuovi contagi',\n    swab: 'Tamponi',\n    swabRegionTotal: 'Tamponi totali',\n    positiveRatioRegions: 'Percentuale positività',\n    testedCases: 'Casi testati',\n    testedCasesRegionTotal: 'Casi testati totali',\n    percetageTestedPositive: 'Percentuale testati positivi',\n    positiveByScreening: 'Positivi da screening',\n    swabPositiveRatio: 'Percentuale positivi',\n    swabPositiveRatioDescription: 'Percentuale di pazienti positivi rispetto ai casi testati',\n    swabTrend: 'Andamento tamponi (totale)',\n    swabTrendVariation: 'Andamento tamponi (valore giornaliero)',\n    testedCaseTrend: 'Andamento casi testati (totale)',\n    testedCasesTrendVariation: 'Andamento casi testati (variazione giornaliera)',\n    testedAndPositive: 'Percentuale positivi rispetto ai testati',\n    placeholderValue: 'N/D',\n    placeholderValueIncr: ' (+N/D)',\n    positiveHomeQuarantine: 'Isolamento domiciliare',\n    hospitalizedWithSymptoms: 'Ricoverati con sintomi',\n    critical: 'Terapia intensiva',\n    regionHospitalSituation: 'Situazione ospedaliera regioni',\n    standardSwabs: 'Tamponi molecolari',\n    rapidSwabs: 'Tamponi antigenici'\n}\n\n\nexport const dataDescription = {\n    lastUpdate: '* tutti gli incrementi sono calcolati rispetto al giorno precedente',\n    totalCases: 'I casi totali tengono il conto delle persone che hanno contratto il virus dall\\'inizio della pandemia. ' +\n        'I nuovi contagi fanno incrementare questo parametro, nessun valore lo fa decrementare',\n    newCases: 'I nuovi casi sono i contagi che vengono registrati per la prima volta, in questo grafico vengono mostrati, ' +\n        'per ciascun giorno, quanti contagi sono avvenuti.',\n    r0: 'Il parametro R0 indica il numero medio di persone che ogni positivo contagia a sua volta.',\n    screening: 'Percentuale positivi individuati tramite screening, i restanti sono stati individuati per sospetto diagnostico',\n    totalCasesRepartitionAbsolute: 'Ripartizione (in valore assoluto) dei casi totali',\n    totalCasesRepartitionPercentage: 'Ripartizione (in percentuale) dei casi totali',\n    totalCasesRegion: '',\n    totalCasesPercentage: 'Percentuale dei casi nell\\'area selezionata rispetto al totale nazionale',\n    recoveredTotal: 'Andamento del valore totale dei guariti nel corso del tempo',\n    recoveredVariation: 'Andamento della variazione giornaliera (incremento) dei guariti nel corso del tempo',\n    recoveredTrendProportional: 'Andamento della percentuale dei guariti (numero di guariti ogni cento casi)',\n    diedTotal: 'Andamento del valore totale dei decessi nel corso del tempo',\n    diedVariation: 'Andamento della variazione giornaliera (incremento) dei decessi nel corso del tempo',\n    diedTrendProportional: 'Andamento della mortalità (numero di decessi ogni 100 casi)',\n    positiveTotal: 'Andamento del valore totale dei positivi attuali nel corso del tempo.',\n    positiveVariation: 'Andamento della variazione giornaliera del numero di positivi correnti nel corso del tempo',\n    positiveRepartitionAbsolute: 'Ripartizione dei positivi correnti nel corso del tempo in 3 categorie: isolamento domiciliare; '+\n        'ricoverati con sintomi (esclusi i ricoverati in terapia intensiva); ricoverati in terapia intensiva (si riporta il valore assoluto).',\n    positiveRepartitionPercentage: 'Ripartizione dei positivi correnti nel corso del tempo in 3 categorie: isolamento domiciliare; ricoverati con sintomi (esclusi i ricoverati in terapia intensiva); ricoverati in terapia intensiva (si riporta il valore percentuale).',\n    positiveRepartition: 'Ripartizione dei positivi correnti nel corso del tempo in 3 categorie: isolamento domiciliare; '+\n        'ricoverati con sintomi (esclusi i ricoverati in terapia intensiva); ricoverati in terapia intensiva (si riportano i valori in percentuale al totale dei positivi).',\n    criticalTrendAbsolute: 'Andamento del numero di ricoverati in terapia intensiva',\n    positiveRegionTable: 'Attualmente positivi',\n    positiveCasesAreaPercentage: 'Percentuale dei positivi attuali nell\\'area selezionata rispetto al totale nazionale',\n    swapTrend: 'Andamento del valore totale di tamponi eseguiti',\n    swabTrendVariation: 'Andamento del numero di tamponi eseguiti nell\\'arco giornata',\n    testedCaseTrend: 'Andamento del valore totale di casi testati (diverso dai tamponi in quanto un singolo individuo' +\n        'può essere sottoposto a più tamponi).',\n    testedCasesTrendVariation: 'Andamento del numero di casi testati eseguiti nell\\'arco della giornata',\n    percentagePositiveTrend: 'Andamento della percentuale di esito positivo sul totale dei casi testati nel corso del tempo',\n    showPercentage: 'Ripartizione in percentuale'\n}\n\n\nexport const infoMenuTitles = {\n    dashboard_covid_vaccine: 'Dashboard vaccini',\n    sectionLinks: 'Link utili',\n    donate: 'Dona',\n    contact: 'Contatti',\n    repository: 'Repository',\n    data: 'Sorgente dati',\n}\n\n\nexport const infoMenuDescriptions = {\n    dashboard_covid_vaccine: 'consegne e somministrazioni dei vaccini',\n    donate: 'donazione libera',\n    contact: 'ricevi assistenza',\n    repository: 'codice sorgente',\n    data: 'Protezione Civile IT',\n}\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 30/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport {chartTitles} from \"./strings\";\n\nexport const RegionList = [\n    {label: chartTitles.allItaly, value: 0},\n    {label: 'Abruzzo', value: 1},\n    {label: 'Basilicata', value: 2},\n    {label: 'Calabria', value: 3},\n    {label: 'Campania', value: 4},\n    {label: 'Emilia-Romagna', value: 5},\n    {label: 'Friuli Venezia Giulia', value: 6},\n    {label: 'Lazio', value: 7},\n    {label: 'Liguria', value: 8},\n    {label: 'Lombardia', value: 9},\n    {label: 'Marche', value: 10},\n    {label: 'Molise', value: 11},\n    {label: 'P.A. Bolzano', value: 12},\n    {label: 'P.A. Trento', value: 13},\n    {label: 'Piemonte', value: 14},\n    {label: 'Puglia', value: 15},\n    {label: 'Sardegna', value: 16},\n    {label: 'Sicilia', value: 17},\n    {label: 'Toscana', value: 18},\n    {label: 'Umbria', value: 19},\n    {label: 'Valle d\\'Aosta', value: 20},\n    {label: 'Veneto', value: 21},\n]","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 02/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport Records from \"./dataset\";\n\nlet dataToReturn = {\n    percentageOfTotal: 0,\n    newCasesTrendAbsolute: [],\n    newCasesTrendDayValue: [],\n    r0Trend: [],\n};\n\nexport function cleanData() {\n    dataToReturn.newCasesTrendAbsolute = [];\n    dataToReturn.newCasesTrendDayValue = [];\n    dataToReturn.r0Trend = [];\n}\n\nconst NewCasesData = (data) => {\n\n    data = Records.getRecords();\n\n\n    if(data !== null){\n        let d = data[data.length - 1];\n\n        dataToReturn.percentageOfTotal = (Math.round(d['totale_casi']/Records.data[Records.data.length -1]['totale_casi'] * 100 * 100).toFixed(2)) / 100;\n\n        if( dataToReturn.newCasesTrendAbsolute.length === 0){\n            for (let i=1; i< data.length; i+=1){\n                dataToReturn.newCasesTrendAbsolute.push(data[i]['totale_casi']);\n                dataToReturn.newCasesTrendDayValue.push(data[i]['nuovi_positivi']);\n                dataToReturn.r0Trend.push(data[i]['totale_casi']);\n            }\n        }\n    }\n    return dataToReturn;\n};\n\n\nexport default NewCasesData;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 28/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport Records from \"./dataset\";\n\nlet dataToReturn = {\n    deathsRatio: 0,\n    diedTrendAbsolute: [],\n    diedTrendDayValue: [],\n    diedTrendProportional: [],\n};\n\nexport function cleanData() {\n    dataToReturn.deathsRatio = 0;\n    dataToReturn.diedTrendAbsolute = [];\n    dataToReturn.diedTrendDayValue = [];\n    dataToReturn.diedTrendProportional = [];\n}\n\nconst DeathsData = (data) => {\n\n    if (data === undefined) {\n        data = Records.getRecords();\n    }\n\n    if (data !== null) {\n        let d = data[data.length - 1];\n\n        dataToReturn.deathsRatio = (Math.round(d['deceduti'] / d['totale_casi'] * 100 * 100) / 100).toFixed(2);\n\n        if (dataToReturn.diedTrendAbsolute.length === 0) {\n            for (let i = 1; i < data.length; i += 1) {\n                dataToReturn.diedTrendAbsolute.push(data[i]['deceduti']);\n                dataToReturn.diedTrendDayValue.push(data[i]['deceduti'] - data[i - 1]['deceduti']);\n                dataToReturn.diedTrendProportional.push(data[i]['deceduti'] <= 0 ? 0 : Math.abs(data[i]['deceduti'] / data[i]['totale_casi'] * 100));\n            }\n        }\n\n    }\n    return dataToReturn;\n};\n\n\nexport default DeathsData;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 28/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport Records from \"./dataset\";\n\nlet dataToReturn = {\n    recoveredRatio: 0,\n    recoveredTrendAbsolute: [],\n    recoveredTrendDayValue: [],\n    recoveredTrendProportional: [],\n};\n\nexport function cleanData() {\n    dataToReturn.recoveredTrendAbsolute = [];\n    dataToReturn.recoveredTrendDayValue = [];\n    dataToReturn.recoveredTrendProportional = [];\n}\n\nconst RecoveredData = (data) => {\n\n    if(data === undefined){\n        data = Records.getRecords();\n    }\n\n    if(data !== null){\n        let d = data[data.length - 1];\n\n        dataToReturn.recoveredRatio = (Math.round(d['dimessi_guariti'] / d['totale_casi'] * 100 * 100) / 100).toFixed(2);\n\n        if( dataToReturn.recoveredTrendAbsolute.length === 0){\n            for (let i=1; i< data.length; i+=1){\n                dataToReturn.recoveredTrendAbsolute.push(data[i]['dimessi_guariti']);\n                dataToReturn.recoveredTrendDayValue.push(data[i]['dimessi_guariti'] - data[i - 1]['dimessi_guariti']);\n                dataToReturn.recoveredTrendProportional.push(data[i]['dimessi_guariti'] <= 0 ? 0 : Math.abs(data[i]['dimessi_guariti'] / data[i]['totale_casi'] * 100));\n            }\n        }\n    }\n    return dataToReturn;\n};\n\n\nexport default RecoveredData;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 30/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport Records from \"./dataset\";\n\nlet dataToReturn = {\n    deltaTrendAbsolute: [],\n    deltaTrendDayVariation: [],\n    percentageOfTotal: 0,\n\n    /* Home Quarantine */\n    homeQuarantine: 0,\n    homeQuarantinePercentage: 0,\n    homeQuarantineVariation: 0,\n    homeQuarantineVariationPercentage: 0,\n\n    /* Hospitalized with Symptoms */\n    hospitalized: 0,\n    hospitalizedPercentage: 0,\n    hospitalizedVariation: 0,\n    hospitalizedVariationPercentage: 0,\n\n    /* Critical */\n    critical: 0,\n    criticalPercentage: 0,\n    criticalVariation: 0,\n    criticalVariationPercentage: 0,\n    criticalTrendAbsolute: [],\n};\n\nexport function cleanData() {\n    dataToReturn.deltaTrendAbsolute = [];\n    dataToReturn.deltaTrendDayVariation = [];\n    dataToReturn.criticalTrendAbsolute = [];\n}\n\nconst PositiveDeltaData = (data) => {\n\n    if(data === undefined){\n        data = Records.getRecords();\n    }\n\n    if(data !== null){\n        let d = data[data.length - 1];\n\n        dataToReturn.percentageOfTotal = (Math.round(d['totale_positivi']/Records.data[Records.data.length -1]['totale_positivi'] * 100 * 100).toFixed(2)) / 100;\n\n        /* Home Quarantine */\n        dataToReturn.homeQuarantine = (d['isolamento_domiciliare']).toLocaleString('it');\n        dataToReturn.homeQuarantinePercentage = Math.round(Math.abs(d['isolamento_domiciliare'] / d['totale_positivi'])* 100 * 100 / 100).toFixed(2);\n        dataToReturn.homeQuarantineVariation = (d['isolamento_domiciliare'] - data[data.length - 2]['isolamento_domiciliare']).toLocaleString('it');\n        dataToReturn.homeQuarantineVariationPercentage = Math.round((data[data.length - 2]['isolamento_domiciliare'] - d['isolamento_domiciliare']) / d['isolamento_domiciliare'] * 100 * 100 / 100).toFixed(2);\n\n        /* Hospitalized with Symptoms */\n        dataToReturn.hospitalized = d['totale_ospedalizzati'].toLocaleString('it');\n        dataToReturn.hospitalizedPercentage = Math.round(Math.abs(d['totale_ospedalizzati'] / d['totale_positivi'])* 100 * 100 / 100).toFixed(2);\n        dataToReturn.hospitalizedVariation = (d['totale_ospedalizzati'] - data[data.length - 2]['totale_ospedalizzati']).toLocaleString('it');\n        dataToReturn.hospitalizedVariationPercentage = Math.round((data[data.length - 2]['totale_ospedalizzati'] - d['totale_ospedalizzati']) / d['totale_ospedalizzati'] * 100 * 100 / 100).toFixed(2);\n\n        /* Critical */\n        dataToReturn.critical = d['terapia_intensiva'].toLocaleString('it');\n        dataToReturn.criticalPercentage = Math.round(Math.abs(d['terapia_intensiva'] / d['totale_positivi'])* 100 * 100 / 100).toFixed(2);\n        dataToReturn.criticalVariation = (d['terapia_intensiva'] - data[data.length - 2]['terapia_intensiva']).toLocaleString('it');\n        dataToReturn.criticalVariationPercentage = Math.round((data[data.length - 2]['terapia_intensiva'] - d['terapia_intensiva']) === 0 ? 0 : (data[data.length - 2]['terapia_intensiva'] - d['terapia_intensiva']) / d['terapia_intensiva'] * 100 * 100 / 100).toFixed(2);\n\n\n        if( dataToReturn.deltaTrendAbsolute.length === 0){\n            for (let i=1; i< data.length; i+=1){\n                dataToReturn.deltaTrendAbsolute.push(data[i]['totale_positivi']);\n                dataToReturn.deltaTrendDayVariation.push(data[i]['totale_positivi']-data[i-1]['totale_positivi']);\n                dataToReturn.criticalTrendAbsolute.push(data[i]['terapia_intensiva']);\n            }\n        }\n\n    }\n    return dataToReturn;\n};\n\n\nexport default PositiveDeltaData;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 25/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nexport default function dateToString(date) {\n    if(date === undefined){\n        return ''\n    }\n    let tmp = date.split('T')[0];\n    return tmp.split('-')[2] + '/' + tmp.split('-')[1] + '/' +  tmp.split('-')[0];\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 05/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport Records from \"./dataset\";\nimport dateToString from \"../utils/dateToString\";\n\nlet dataToReturn = {\n    repartitionPercentage: [],\n    repartitionAbsolute: []\n};\n\nexport function cleanData() {\n    dataToReturn.repartitionAbsolute = [];\n    dataToReturn.repartitionPercentage = [];\n}\n\nconst PositiveRepartitionData = (data) => {\n\n    if(data === undefined){\n        data = Records.getRecords();\n    }\n\n    if(data !== null && dataToReturn.repartitionAbsolute.length === 0){\n\n        for(let i = 0; i < data.length; i++){\n            if(data[i]['isolamento_domiciliare'] + data[i]['totale_ospedalizzati'] + data[i]['terapia_intensiva'] > 0){\n                dataToReturn.repartitionPercentage.push(\n                    {\n                        date: dateToString(data[i]['data']),\n                        homeQuarantine: Math.abs(data[i]['isolamento_domiciliare'] === 0 ? 0 : data[i]['isolamento_domiciliare'] / data[i]['totale_positivi']) * 100 * 100 / 100,\n                        hospitalized: Math.abs((data[i]['totale_ospedalizzati'] - data[i]['terapia_intensiva']) === 0 ? 0 :(data[i]['totale_ospedalizzati'] - data[i]['terapia_intensiva']) / data[i]['totale_positivi']) * 100 * 100 / 100,\n                        critical: Math.abs(data[i]['terapia_intensiva'] === 0 ? 0 : data[i]['terapia_intensiva'] / data[i]['totale_positivi']) * 100 * 100 / 100\n                    }\n                );\n                dataToReturn.repartitionAbsolute.push(\n                    {\n                        date: dateToString(data[i]['data']),\n                        homeQuarantine: data[i]['isolamento_domiciliare'],\n                        hospitalized:data[i]['totale_ospedalizzati'] - data[i]['terapia_intensiva'],\n                        critical: data[i]['terapia_intensiva']\n                    }\n                )\n            }\n        }\n    }\n    return dataToReturn;\n};\n\n\nexport default PositiveRepartitionData;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 05/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport Records from \"./dataset\";\nimport dateToString from \"../utils/dateToString\";\n\nlet dataToReturn = {\n    /* repartition */\n    repartition: [],\n    repartitionPercentage: []\n};\n\nexport function cleanData() {\n    dataToReturn.repartition = [];\n    dataToReturn.repartitionPercentage = [];\n}\n\nconst TotalCasesRepartitionData = (data) => {\n\n    if(data === undefined){\n        data = Records.getRecords();\n    }\n\n    if(data !== null && dataToReturn.repartition.length === 0 && dataToReturn.repartitionPercentage.length === 0 ){\n\n        for(let i = 0; i < data.length; i++){\n            if(data[i]['dimessi_guariti'] + data[i]['totale_positivi'] + data[i]['deceduti'] > 0){\n                dataToReturn.repartition.push(\n                    {\n                        date: dateToString(data[i]['data']),\n                        recovered: data[i]['dimessi_guariti'],\n                        current: data[i]['totale_positivi'],\n                        death: data[i]['deceduti']\n                    }\n                );\n                dataToReturn.repartitionPercentage.push(\n                    {\n                        date: dateToString(data[i]['data']),\n                        recovered: Math.abs(data[i]['dimessi_guariti'] / data[i]['totale_casi']) * 100 * 100 / 100,\n                        current: Math.abs(data[i]['totale_positivi']  / data[i]['totale_casi']) * 100 * 100 / 100,\n                        death: Math.abs(data[i]['deceduti'] / data[i]['totale_casi']) * 100 * 100 / 100\n                    }\n                )\n            }\n        }\n    }\n    return dataToReturn;\n};\n\n\nexport default TotalCasesRepartitionData;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 29/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport Records from \"./dataset\";\n\nlet dataToReturn = {\n    deathsRatio: [''],\n    swabTrendAbsolute: [],\n    swabTrendVariation: [],\n    testedCasesTrendAbsolute: [],\n    testedCasesTrendVariation: [],\n    percentagePositiveTrend: [],\n    positiveByScreening: 0,\n};\n\nexport function cleanData() {\n    dataToReturn.swabTrendAbsolute = [];\n    dataToReturn.swabTrendVariation = [];\n    dataToReturn.testedCasesTrendAbsolute = [];\n    dataToReturn.testedCasesTrendVariation = [];\n    dataToReturn.percentagePositiveTrend = [];\n}\n\nconst SwabData = (data) => {\n\n    if(data === undefined){\n        data = Records.getRecords();\n    }\n\n    if(data !== null){\n        let d = data[data.length - 1];\n\n        dataToReturn.positiveRatio = (Math.round(d['totale_casi'] / d['casi_testati'] * 100 * 100) / 100).toFixed(2);\n        dataToReturn.positiveByScreening = (Math.round(d['casi_da_screening'] / d['totale_casi'] * 100)).toFixed(2);\n\n        if( dataToReturn.swabTrendAbsolute.length === 0){\n            for (let i=1; i< data.length; i+=1){\n                dataToReturn.swabTrendAbsolute.push(data[i]['tamponi']);\n                dataToReturn.swabTrendVariation.push(data[i]['tamponi'] - data[i - 1]['tamponi']);\n                dataToReturn.testedCasesTrendAbsolute.push(data[i]['casi_testati']);\n                dataToReturn.testedCasesTrendVariation.push(data[i-1]['casi_testati'] === null ? null : data[i]['casi_testati'] - data[i - 1]['casi_testati']);\n                dataToReturn.percentagePositiveTrend.push( data[i]['casi_testati'] === null || data[i]['nuovi_positivi'] === 0 ||  (data[i]['nuovi_positivi'] / (Math.abs(data[i]['casi_testati'] - data[i - 1]['casi_testati']))) * 100 > 100 ? null : ((data[i]['nuovi_positivi'] / (Math.abs(data[i]['casi_testati'] - data[i - 1]['casi_testati']))) * 100));\n            }\n        }\n\n    }\n    return dataToReturn;\n};\n\n\nexport default SwabData;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 09/09/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\nimport NewCasesData from \"./newCasesData\";\nimport {cleanData as cleanDeaths}  from \"./deathData\";\nimport {cleanData as cleanNewCases} from \"./newCasesData\";\nimport {cleanData as cleanRecovered} from \"./recoveredData\";\nimport {cleanData as cleanPositiveDelta} from \"./positiveDeltaData\";\nimport {cleanData as cleanPositiveRepartition} from \"./positiveRepartitionData\";\nimport {cleanData as cleanTotalCasesRepartion} from \"./totalCasesRepartitionData\";\nimport {cleanData as cleanSwab} from \"./swabData\";\n\n\nlet DataRouter = {\n    NewCasesData: () => {return NewCasesData()},\n\n    refreshData(){\n        this.NewCasesData = NewCasesData()\n    },\n\n    cleanData(){\n        cleanDeaths();\n        cleanNewCases();\n        cleanRecovered();\n        cleanPositiveDelta();\n        cleanPositiveRepartition();\n        cleanTotalCasesRepartion();\n        cleanSwab();\n    }\n}\n\nexport default DataRouter;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 31/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport {RegionList} from \"../ui/contents/locationsList\";\nimport Records from \"./dataset\";\nimport { EventRegister } from 'react-native-event-listeners'\nimport DataRouter from \"./dataRouter\";\n\n\nlet SelectedLocation ={\n\n    index: 0,\n\n    setLocation(index){\n        if(index >= 0 && index <= RegionList.length){\n            this.index = index;\n            Records.clearSingleRegionData();\n            Records.getRecords();\n            DataRouter.cleanData();\n            DataRouter.refreshData();\n            EventRegister.emit('locationChanged', 'it works!!!');\n        }\n    },\n\n    getLocation(){\n        return this.index;\n    },\n\n};\n\nexport default SelectedLocation;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 24/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport SelectedLocation from \"./selectedLocation\";\n\nlet Records = {\n\n    data: [],\n    regionData: [],\n    singleRegionData: [],\n\n    setRecords(records){\n        this.data = records;\n    },\n\n    getRecords(){\n\n        if(SelectedLocation.getLocation() <= 0){\n            return this.data;\n        }\n        else {\n            if(this.singleRegionData.length === 0){\n                for(let i = SelectedLocation.getLocation() - 1; i < this.regionData.length; i+=21){\n                    this.singleRegionData.push(this.regionData[i]);\n                }\n            }\n            return this.singleRegionData;\n        }\n    },\n\n    setRegionRecords(records){\n        this.regionData = records;\n    },\n\n    getRegionRecords(){\n        return this.regionData;\n    },\n\n    clearSingleRegionData(){\n        this.singleRegionData = [];\n    }\n\n};\n\nexport default Records;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 07/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nconst RemoteUrls = {\n    dashboard_covid_vaccine: 'https://marinimau.github.io/covid19_dashboard_vaccini',\n    national: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-andamento-nazionale.json',\n    regionsLatest: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-regioni-latest.json',\n    regions: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-regioni.json',\n    donate: 'https://www.paypal.com/paypalme/marinimau',\n    repository: 'https://github.com/marinimau/covid19_dashboard',\n    data: 'https://github.com/pcm-dpc/COVID-19',\n    contact: 'https://github.com/marinimau/covid19_dashboard/issues'\n}\n\nexport default RemoteUrls;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\nimport RemoteUrls from \"../ui/contents/urls\";\n\n\nconst retrieveData = () =>\n    fetch(RemoteUrls.national)\n        .then(res => (res.ok ? res : Promise.reject(res)))\n        .then(res => res.json());\n\nexport default retrieveData;\n\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nconst Colors = {\n    /** LIGHT MODE **/\n    main: '#1479FF',\n    mainTransparent: 'rgba(20,121,255,0.1)',\n    basic: '#1C1C1E',\n    basicNotes: 'rgba(255,255,255,0.9)',\n    icons: 'rgba(28,28,30,0.4)',\n    navigationInactive: 'rgba(28,28,30,0.7)',\n    basicTransparent: 'rgba(25,59,104,0.1)',\n    basicShadow:'rgba(25,59,104,0.33)',\n    background: '#f0f2f5',\n    title: '#000',\n    borders: 'rgba(101,101,101,0.25)',\n    basicElevation: '#FFFFFF',\n    accent1: '#14D2FF',\n    accent2: '#14A5FF',\n    accent3: '#14EBFF',\n    axis: '#E4E4E4',\n    bars: '#1479FF',\n    navigationOverlay: 'rgba(0,0,0,0.1)',\n    drawerSelectedText: '#1C1C1E',\n    drawerSelectedBackground: 'rgba(25,59,104,0.1)',\n    /** DARK MODE **/\n    darkMode_main: '#0f63d2',\n    darkMode_mainTransparent: 'rgba(24,97,195,0.1)',\n    darkMode_title: '#fff',\n    darkMode_basic: '#989899',\n    darkMode_basicNotesLight: '#fff',\n    darkMode_basicNotesText: '#000',\n    darkMode_basicNotes: '#3a3b3c',\n    darkMode_icons: 'rgba(202,202,202,0.4)',\n    darkMode_navigationInactive: 'rgba(202,202,202,0.7)',\n    darkMode_basicTransparent: 'rgba(136,136,136,0.1)',\n    darkMode_basicShadow:'rgba(0,0,0,1)',\n    darkMode_basicElevation: '#1c1c1e',\n    darkMode_background: '#000', //'#18191a',\n    darkMode_accent1: '#14D2FF',\n    darkMode_accent2: '#14A5FF',\n    darkMode_accent3: '#14EBFF',\n    darkMode_axis: '#E4E4E4',\n    darkMode_bars: '#1479FF',\n    darkMode_drawerSelectedText: '#bebebe',\n    darkMode_drawerSelectedBackground: '#3a3b3c',\n};\n\nexport default Colors;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 03/09/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport {Appearance} from \"react-native-appearance\";\n\nexport default function darkMode() {\n    return Appearance.getColorScheme() === 'dark';\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 27/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\nimport darkMode from \"./darkModeDetector\";\n\nlet LegendColors = {\n    green: darkMode() ? '#30d158' : '#34c759',\n    yellow: darkMode() ? '#ffd60a' : '#ffcc00',\n    red: darkMode() ? '#ff453a' : '#ff3a30',\n    grey: darkMode() ? '#767676' : '#616161',\n    blue: darkMode() ? '#0a84ff' : '#007bff',\n    teal: darkMode() ? '#64d3ff' : '#5ac8fa',\n    orange: darkMode() ?'#ff9f0a' :  '#ff9500',\n    purple: darkMode() ? '#bf5af2' : '#af52de',\n    neutral: darkMode() ? '#505050' : '#000000',\n}\n\nexport default LegendColors;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\n\nimport {getCardBigWidth, getCardMediumWidth, getCardSmallWidth, getChartFullWidth} from \"../../utils/dimensionsUtils\";\n\nexport const dimens = {\n    verySmallScreen: 400,\n    largeScreen: 768,\n    drawerWidth: 250,\n    chartMargin: 55,\n    headerHeight: 74,\n    headerLargeHeight: 90,\n    cardMargin: 8,\n    cardMarginSmallScreen: 20,\n    pieChartRadius: 100,\n    lineChartHeight: 220,\n\n};\n\nexport const dynamicDimens = {\n    cardSmall: getCardSmallWidth(),\n    cardMedium: getCardMediumWidth(),\n    cardBig: getCardBigWidth(),\n    chartFullWidth: getChartFullWidth(),\n}\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 23/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport {Dimensions} from 'react-native';\nimport {dimens} from \"../ui/theme/dimens\";\n\nexport function getCardBigWidth() {\n    return Dimensions.get('window').width >= dimens.largeScreen ?\n        (Dimensions.get('window').width - dimens.drawerWidth - dimens.cardMargin * 2) :\n        (Dimensions.get('window').width - dimens.cardMarginSmallScreen)\n\n}\n\nexport function getCardSmallWidth() {\n    return Dimensions.get('window').width >= dimens.largeScreen ?\n        250 : (Dimensions.get('window').width - dimens.cardMarginSmallScreen)\n}\n\nexport function getCardMediumWidth() {\n    return Dimensions.get('window').width >= dimens.largeScreen ?\n        768 : (Dimensions.get('window').width - dimens.cardMarginSmallScreen)\n}\n\nexport function getChartFullWidth() {\n    return Dimensions.get('window').width > dimens.largeScreen ?\n        (Dimensions.get('window').width - dimens.drawerWidth - dimens.chartMargin) :\n        (Dimensions.get('window').width - dimens.chartMargin)\n}\n\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport {StyleSheet, Platform} from \"react-native\";\nimport Colors from \"./colors\";\nimport LegendColors from \"./legendColors\"\nimport {dynamicDimens} from \"./dimens\";\nimport darkMode from \"./darkModeDetector\";\n\n\nexport const styles = StyleSheet.create({\n    root: {\n        backgroundColor: Colors.basicTransparent,\n    },\n    rootContainer: {\n        flex: 1,\n        alignItems: 'flex-start',\n        alignContent: 'space-around',\n        justifyContent: 'flex-start',\n        backgroundColor: darkMode() ? Colors.darkMode_background : Colors.background,\n    },\n    scrollableContainer: {\n        flex: 1,\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        marginBottom: 55,\n    },\n    loading: {\n        backgroundColor:  darkMode() ? Colors.darkMode_background : Colors.background,\n    },\n    container: {\n        flex: 1,\n        backgroundColor:  darkMode() ? Colors.darkMode_basicElevation : Colors.basicElevation,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    menuItemradius: {\n        paddingLeft: 10,\n        borderRadius:20,\n        borderTopLeftRadius: 5,\n        borderTopRightRadius: 20,\n        borderBottomRightRadius: 20,\n        borderBottomLeftRadius: 20,\n        borderColor: 'transparent'\n    },\n    /*\n     *  HeaderStyle\n     *\n     */\n    header: {\n        backgroundColor: darkMode() ? Colors.darkMode_basicElevation : Colors.basicElevation,\n        borderBottomColor: darkMode() ? Colors.darkMode_basicNotes : Colors.borders,\n        borderBottomWidth: 0.5,\n        position:  Platform.OS === 'web' ? 'fixed': 'absolute',\n        top: 0,\n        left: 0,\n    },\n    headerTitle: {\n        color: darkMode() ? Colors.darkMode_title : Colors.title,\n    },\n    headerShadow: {\n        shadowColor: darkMode() ? Colors.darkMode_basicShadow : Colors.basicShadow,\n        shadowOffset: {\n            width: 0,\n            height: 5,\n        },\n        shadowOpacity: 0.4,\n        shadowRadius: 13.16,\n        elevation: 20,\n    },\n    /*\n     *  Card items\n     *  3 sizes:\n     *      - big\n     *      - medium\n     *      - small\n     */\n    cardGeneric: {\n        position: 'relative',\n        borderRadius: 10,\n        margin: 10,\n        height: 'auto',\n        padding: 20,\n        backgroundColor: darkMode() ? Colors.darkMode_basicElevation : Colors.basicElevation,\n        borderColor: darkMode() ? Colors.darkMode_basicTransparent : Colors.borders,\n        borderWidth: 0.5,\n        elevation: 20,\n    },\n    cardShadow: {\n        shadowColor: darkMode() ? Colors.darkMode_basicShadow : Colors.basicShadow,\n        shadowOffset: {\n            width: 0,\n            height: 10,\n        },\n        shadowOpacity: darkMode() ? 0 : 0.2,\n        shadowRadius: 13.16,\n        elevation: 20,\n    },\n    cardBig: {\n        width: dynamicDimens.cardBig\n    },\n    cardMedium: {\n        width: dynamicDimens.cardMedium\n    },\n    cardSmall: {\n        width: dynamicDimens.cardSmall\n    },\n    /*\n     *  Indicators\n     */\n    indicatorTitle: {\n        fontSize: 22,\n        fontWeight: \"700\",\n        color: '#fff'\n    },\n    indicatorValue: {\n        textAlign: 'center',\n        color:  darkMode() ? Colors.darkMode_basic : Colors.basic\n    },\n    indicatorValueBold: {\n        marginTop:20,\n        fontSize: 22,\n        fontWeight: \"900\",\n    },\n    indicatorValueIncr: {\n        marginTop: 5,\n        marginBottom: 10,\n        fontSize: 14,\n        fontStyle: 'italic',\n    },\n    indicatorLight: {\n        color: '#fff'\n    },\n    indicatorOrange: {\n        color: LegendColors.yellow\n    },\n    indicatorGreen: {\n        backgroundColor: LegendColors.green\n    },\n    indicatorGrey: {\n        color: LegendColors.grey\n    },\n    indicatorRed: {\n        color: LegendColors.red\n    },\n    /*\n     *  Chart\n     */\n    chartTitle: {\n        fontSize: 18,\n        fontWeight: \"700\",\n        color: darkMode() ? Colors.darkMode_title : Colors.title,\n    },\n    chartDescription: {\n        fontSize: 12,\n        fontStyle: 'italic',\n        textAlign: 'center',\n        marginTop: 20,\n        color: darkMode() ? Colors.darkMode_basic : Colors.basic,\n    },\n    chartManipulationDescription: {\n        color: darkMode() ? Colors.darkMode_basic : Colors.basic,\n    },\n    infoDescription: {\n        fontSize: 16,\n        color: darkMode() ? Colors.darkMode_basic : Colors.basic,\n        fontStyle: 'italic',\n        textAlign: 'left',\n        marginTop: 20,\n        marginLeft: 20,\n        marginRight: 20,\n\n    },\n    chartBigValue: {\n        width: '100%',\n        textAlign: 'center',\n        fontSize: 30,\n        marginTop: 30,\n        marginBottom: 30,\n        color: darkMode() ? Colors.darkMode_basic : Colors.basic,\n    },\n    /*\n     *  Chart legend\n     *\n     */\n    legendExternalContainer: {\n        flex: 1,\n        margin: 10,\n        flexDirection: 'row',\n        flexWrap: 'wrap'\n    },\n    legendContainer: {\n        margin: 10,\n        position: 'relative',\n        flexDirection: 'row'\n    },\n    legendColorSquare: {\n        width: 20,\n        height:20,\n        borderRadius: 5,\n    },\n    legendTitle: {\n        marginLeft: 10,\n        color: darkMode() ? Colors.darkMode_basic : Colors.basic,\n    },\n    /*\n     *  Notes\n     *\n     */\n    notesContainer: {\n        bottom: 0,\n        position: Platform.OS === 'web' ? 'fixed': 'absolute',\n        justifyContent: Platform.OS === 'web' ? 'left': 'center',\n        alignItems: Platform.OS === 'web' ? 'left': 'center',\n        width: '100%',\n        height: 'auto',\n        backgroundColor: darkMode() ? Colors.darkMode_basicElevation : Colors.basic,\n        paddingTop: 15,\n        paddingBottom: 15,\n        borderColor: 'transparent',\n        borderTopColor: darkMode() ? Colors.darkMode_basicNotes : Colors.borders,\n        borderWidth: 0.5,\n    },\n});\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {View, Text} from \"react-native\";\nimport {styles} from \"../../theme/style\";\nimport {loadingMessages} from \"../../contents/strings\";\n\n\nclass ErrorScreen extends Component{\n\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <View style={[{ flex: 1, alignItems: 'center', justifyContent: 'center' }, styles.loading]}>\n                <Text>{loadingMessages.error}</Text>\n            </View>\n        )\n    }\n}\n\nexport default ErrorScreen;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 07/08/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport RemoteUrls from \"../ui/contents/urls\";\n\nconst retrieveRegionData = () =>\n    fetch(RemoteUrls.regions)\n        .then(res => (res.ok ? res : Promise.reject(res)))\n        .then(res => res.json());\n\n\nexport default retrieveRegionData;\n\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {View, ActivityIndicator} from \"react-native\";\nimport {styles} from \"../../theme/style\";\n\n\nclass LoadingComponent extends Component{\n\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <View style={[{ flex: 1, alignItems: 'center', justifyContent: 'center' }, styles.loading]}>\n                <View>\n                    <ActivityIndicator />\n                </View>\n            </View>\n        )\n    }\n}\n\nexport default LoadingComponent;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 28/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport * as React from 'react';\n\n\nexport const navigationRef = React.createRef();\n\nexport function navigate(name, params) {\n    navigationRef.current?.navigate(name, params);\n}\n\nexport function reRender() {\n    navigationRef.current?.forceUpdate();\n}\n\n\nexport const stackRef = React.createRef();\n\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 16/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport Records from \"./dataset\";\nimport {loadingMessages} from \"../ui/contents/strings\";\n\nlet dataToReturn = {\n    notes: []\n};\n\nconst NotesData = (data) => {\n\n    data = Records.getRegionRecords();\n\n    if (data !== undefined) {\n        if (dataToReturn.notes.length === 0) {\n            for (let i = data.length - 21 ; i < data.length; i++) {\n                if (data[i]['note'] !== null) {\n                    dataToReturn.notes.push('       (' + data[i]['denominazione_regione'].toUpperCase() + ') ' + data[i]['note'].replace(/(\\r\\n|\\n|\\r)/gm, \"\"));\n                }\n            }\n            if (dataToReturn.notes.length === 0) {\n                dataToReturn.notes.push(loadingMessages.noNotes);\n            }\n        }\n    }\n    return dataToReturn;\n};\n\n\nexport default NotesData;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 16/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {PureComponent} from 'react'\nimport {styles} from \"../../theme/style\";\nimport {View, SafeAreaView, Platform, Dimensions} from \"react-native\";\nimport NotesData from \"../../../logic/notesData\";\nimport Colors from \"../../theme/colors\";\nimport TextTicker from \"react-native-text-ticker\";\nimport {dimens} from \"../../theme/dimens\";\nimport darkMode from \"../../theme/darkModeDetector\";\n\nlet windowWidth = Dimensions.get(\"window\").width;\n\nclass NotesComponent extends PureComponent {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        return (\n            <View style={[styles.notesContainer]}>\n                    {Platform.OS === 'web' ?\n                        <TextTicker\n                            style={{width: (windowWidth > dimens.largeScreen ? windowWidth - dimens.drawerWidth : windowWidth), color: darkMode() ? Colors.darkMode_basic : Colors.basicElevation}}\n                            duration={50000}\n                            bounce={false}\n                            scroll={true}\n                            isInteraction={false}\n                            useNativeDriver={false}\n                            repeatSpacer={50}\n                            marqueeDelay={0}\n                            loop\n                            isRTL={false}>\n                            {NotesData().notes}\n                        </TextTicker>\n                        :\n                        <SafeAreaView>\n                            <TextTicker\n                                style={{color: Colors.basicElevation}}\n                                duration={50000}\n                                bounce={false}\n                                scroll={true}\n                                isInteraction={false}\n                                repeatSpacer={50}\n                                marqueeDelay={0}\n                                loop\n                                isRTL={false}>\n                                {NotesData().notes}\n                            </TextTicker>\n                        </SafeAreaView>\n                    }\n            </View>\n        )\n    }\n\n}\n\nexport default NotesComponent;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 30/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {RegionList} from \"../../contents/locationsList\";\nimport RNPickerSelect from 'react-native-picker-select';\nimport {styles} from \"../../theme/style\";\nimport {View, StyleSheet, Platform} from \"react-native\";\nimport {chartTitles, uiButtons} from \"../../contents/strings\";\nimport Colors from \"../../theme/colors\";\nimport SelectedLocation from \"../../../logic/selectedLocation\";\nimport darkMode from \"../../theme/darkModeDetector\";\nimport {SYSTEM_FONT_STACK} from \"react-native-web/dist/exports/StyleSheet/constants\";\n\n\nclass LocationSelector extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {location: SelectedLocation.getLocation()}\n    }\n\n    render() {\n        return (\n            <View style={[styles.cardGeneric, styles.cardShadow, styles.cardBig, {\n                backgroundColor: darkMode() ? Colors.darkMode_basicNotes : Colors.basicElevation,\n                padding: 0\n            }]}>\n                <RNPickerSelect\n                    items={RegionList}\n                    placeholder={{value: 0, label: chartTitles.locationSelectorPlaceholder}}\n                    onValueChange={(value) => {\n                        this.setState({location: value});\n                        SelectedLocation.setLocation(value);\n                    }}\n                    doneText={uiButtons.done}\n                    style={pickerSelectStyles}\n                    fixAndroidTouchableBug={true}\n                    useNativeAndroidPickerStyle={false}\n                />\n            </View>\n        );\n    }\n}\n\nconst pickerSelectStyles = StyleSheet.create({\n    inputWeb: {\n        fontSize: 16,\n        borderWidth: 0,\n        backgroundColor: darkMode() ? 'transparent' :Colors.basicElevation,\n        fontFamily: SYSTEM_FONT_STACK,\n        color: (darkMode() ? Colors.darkMode_basic : Colors.basic),\n    },\n    inputIOS: {\n        fontSize: 16,\n        paddingVertical: 12,\n        paddingHorizontal: 10,\n        borderWidth: 0,\n        backgroundColor: 'transparent',\n        color: (darkMode() ? Colors.darkMode_basic : Colors.basic),\n        paddingRight: 30,\n    },\n    inputAndroid: {\n        fontSize: 16,\n        paddingHorizontal: 10,\n        paddingVertical: 8,\n        borderWidth: 0,\n        borderRadius: 8,\n        color: 'transparent',\n        paddingRight: 30,\n    },\n});\n\nexport default LocationSelector;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 19/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react'\nimport {styles} from \"../theme/style\";\nimport {ScrollView, View} from \"react-native\";\nimport NotesComponent from \"./latest_updates/notesComponent\";\nimport LocationSelector from \"./location_selector/locationSelector\";\n\nexport default class MainScrollableContents extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <>\n                <View style={[styles.rootContainer, {position: 'relative'}]}>\n                    <ScrollView>\n                        <View style={[styles.scrollableContainer]}>\n                            <LocationSelector />\n                            {this.props.children}\n                        </View>\n                    </ScrollView>\n                    <NotesComponent/>\n                </View>\n            </>\n        );\n    }\n}\n\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 19/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport Records from \"./dataset\";\n\nlet dataToReturn = {\n    lastUpdateDate: 'undefined',\n    newCases: 0,\n    totalCases: 0,\n    totalCurrentCases: 0,\n    totalCasesVariationPercentage: 0,\n    currentCasesVariation: 0,\n    currentCasesVariationPercentage: 0,\n    totalRecovered: 0,\n    recoveredVariation: 0,\n    recoveredVariationPercentage: 0,\n    totalDeaths: 0,\n    deathsVariation: 0,\n    deathsVariationPercentage: 0,\n    swab: 0,\n    swabVariation: 0,\n    swabVariationPercentage: 0,\n    testedCases: 0,\n    testedCasesVariation: 0,\n    testedCasesVariationPercentage: 0,\n    rapidTestCumulative: 0,\n    standardTestCumulative: 0,\n    rapidTestVariation: 0,\n    standardTestVariation: 0,\n\n};\n\nconst latestUpdateData = (data) => {\n\n    if(data === undefined){\n        data = Records.getRecords();\n    }\n\n    if(data !== null){\n        let d = data[data.length - 1];\n\n        /* Date - do not use replaceAll, it make issues on android */\n        dataToReturn.lastUpdateDate = d['data'].replace('T', ' ').split(' ')[0].replace('-','/',).replace('-','/',);\n\n        /* All Cases */\n        dataToReturn.totalCases = (d['totale_casi']).toLocaleString('it');\n        dataToReturn.newCases = '+ ' + (Math.abs(d['nuovi_positivi'])).toLocaleString('it');\n        dataToReturn.totalCasesVariationPercentage = '+' + ((Math.round(Math.abs(d['nuovi_positivi']) / d['totale_casi'] * 100 * 100) / 100).toFixed(2));\n\n        /* Current cases */\n        dataToReturn.totalCurrentCases = (d['totale_positivi']).toLocaleString('it');\n        dataToReturn.currentCasesVariation = d['variazione_totale_positivi'] >= 0 ?\n            '+ ' + (d['variazione_totale_positivi']).toLocaleString('it') : (d['variazione_totale_positivi']).toLocaleString('it');\n        dataToReturn.currentCasesVariationPercentage = (Math.round( d['variazione_totale_positivi'] / d['totale_positivi'] * 100 * 100) / 100).toFixed(2);\n\n\n        /* Recovered */\n        dataToReturn.totalRecovered = (d['dimessi_guariti']).toLocaleString('it');\n        dataToReturn.recoveredVariation =  '+ '+ (Math.abs(d['dimessi_guariti'] - data[data.length - 2]['dimessi_guariti'])).toLocaleString('it');\n        dataToReturn.recoveredVariationPercentage = '+' + Math.round((Math.abs(Math.abs(d['dimessi_guariti'] - data[data.length - 2]['dimessi_guariti']) / d['dimessi_guariti'] * 100) * 100) / 100).toFixed(2);\n\n        /* Deaths */\n        dataToReturn.totalDeaths = (d['deceduti']).toLocaleString('it');\n        dataToReturn.deathsVariation = '+ ' + (Math.abs( d['deceduti'] - data[data.length - 2]['deceduti'])).toLocaleString('it');\n        dataToReturn.deathsVariationPercentage = '+' + Math.round((Math.abs(d['deceduti'] - data[data.length - 2]['deceduti']) /d['deceduti'] * 100 * 100) / 100).toFixed(2);\n\n        /* Swab */\n        dataToReturn.swab = (d['tamponi']).toLocaleString('it');\n        dataToReturn.swabVariation = '+ ' + (Math.abs( d['tamponi'] - data[data.length - 2]['tamponi'])).toLocaleString('it');\n        dataToReturn.swabVariationPercentage =  '+' +  Math.round(Math.abs( d['tamponi'] - data[data.length - 2]['tamponi']) /d['tamponi'] * 100  * 100 / 100).toFixed(2);\n        dataToReturn.standardTestCumulative = (d['tamponi_test_molecolare']).toLocaleString('it');\n        dataToReturn.rapidTestCumulative = (d['tamponi_test_antigenico_rapido']).toLocaleString('it');\n        dataToReturn.standardTestVariation = '+ ' + (Math.abs(d['tamponi_test_molecolare'] - data[data.length - 2]['tamponi_test_molecolare'])).toLocaleString('it');\n        dataToReturn.rapidTestVariation = '+ ' + (Math.abs(d['tamponi_test_antigenico_rapido'] - data[data.length - 2]['tamponi_test_antigenico_rapido'])).toLocaleString('it');\n        dataToReturn.standardTestVariationPercentage = '+' + Math.round(Math.abs( d['tamponi_test_molecolare'] - data[data.length - 2]['tamponi_test_molecolare']) /d['tamponi_test_molecolare'] * 100  * 100 / 100).toFixed(2);\n        dataToReturn.rapidTestVariationPercentage = '+' + Math.round(Math.abs( d['tamponi_test_antigenico_rapido'] - data[data.length - 2]['tamponi_test_antigenico_rapido']) /d['tamponi_test_antigenico_rapido'] * 100  * 100 / 100).toFixed(2);\n\n        /* Tested Cases */\n        dataToReturn.testedCases = (d['casi_testati']).toLocaleString('it');\n        dataToReturn.testedCasesVariation = '+ ' + (Math.abs(d['casi_testati'] - data[data.length - 2]['casi_testati'])).toLocaleString('it');\n        dataToReturn.testedCasesVariationPercentage = '+' + Math.round(Math.abs( d['casi_testati'] - data[data.length - 2]['casi_testati']) /d['casi_testati'] * 100  * 100 / 100).toFixed(2);\n    }\n    return dataToReturn;\n};\n\n\nexport default latestUpdateData;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 01/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React from 'react';\nimport {Dimensions} from 'react-native';\nimport {dimens} from \"../theme/dimens\";\nimport darkMode from \"../theme/darkModeDetector\";\n\n\nexport function lineChartNumLabels(range) {\n    switch (range) {\n        case 7:\n        case -1:\n            return (Dimensions.get('window').width <= dimens.verySmallScreen ? 4 : 7)\n        case 30:\n            return 4;\n    }\n\n}\n\nexport const ShadowOpacity = darkMode() ? 0 : 0.2;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 27/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\n\nimport React, {Component} from 'react';\nimport LegendColors from \"../../ui/theme/legendColors\";\nimport {styles} from \"../../ui/theme/style\";\nimport {Text, View} from \"react-native\";\nimport {chartTitles} from \"../../ui/contents/strings\";\nimport latestUpdateData from \"../../logic/latestUpdateData\";\nimport {ShadowOpacity} from \"../../ui/contents/params\";\n\nexport default class CardTotalCases extends Component{\n\n\n    render() {\n        return (\n            <View  style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall, {backgroundColor: LegendColors.red, shadowColor: LegendColors.lightred, shadowOpacity: ShadowOpacity}]}>\n                <Text style={[styles.chartTitle, styles.indicatorLight]}>{chartTitles.totalCases}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueBold, styles.indicatorLight]}>{latestUpdateData().totalCases}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueIncr,  styles.indicatorLight]}>{latestUpdateData().newCases} ({latestUpdateData().totalCasesVariationPercentage}%)</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 27/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport LegendColors from \"../../ui/theme/legendColors\";\nimport {styles} from \"../../ui/theme/style\";\nimport {Text, View} from \"react-native\";\nimport {chartTitles} from \"../../ui/contents/strings\";\nimport latestUpdateData from \"../../logic/latestUpdateData\";\nimport {ShadowOpacity} from \"../../ui/contents/params\";\n\nexport default class CardRecovered extends Component{\n\n    render() {\n        return (\n            <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall, {backgroundColor: LegendColors.green, shadowColor: LegendColors.lightgreen, shadowOpacity: ShadowOpacity}]}>\n                <Text style={[styles.chartTitle, styles.indicatorLight]}>{chartTitles.recovered}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueBold, styles.indicatorLight]}>{latestUpdateData().totalRecovered}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueIncr, styles.indicatorLight]}>{latestUpdateData().recoveredVariation} ({latestUpdateData().recoveredVariationPercentage}%)</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 27/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport LegendColors from \"../../ui/theme/legendColors\";\nimport {styles} from \"../../ui/theme/style\";\nimport {Text, View} from \"react-native\";\nimport {chartTitles} from \"../../ui/contents/strings\";\nimport latestUpdateData from \"../../logic/latestUpdateData\";\nimport {ShadowOpacity} from \"../../ui/contents/params\";\n\nexport default class CardDied extends Component{\n\n    render() {\n        return (\n            <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall, {backgroundColor: LegendColors.grey, shadowColor: LegendColors.grey, shadowOpacity: ShadowOpacity}]}>\n                <Text style={[styles.chartTitle, styles.indicatorLight]}>{chartTitles.died}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueBold, styles.indicatorLight]}>{latestUpdateData().totalDeaths}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueIncr,  styles.indicatorLight]}>{latestUpdateData().deathsVariation} ({latestUpdateData().deathsVariationPercentage}%)</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 27/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport LegendColors from \"../../ui/theme/legendColors\";\nimport {styles} from \"../../ui/theme/style\";\nimport {Text, View} from \"react-native\";\nimport {chartTitles} from \"../../ui/contents/strings\";\nimport latestUpdateData from \"../../logic/latestUpdateData\";\nimport {ShadowOpacity} from \"../../ui/contents/params\";\n\nexport default class CardCurrentPositive extends Component{\n\n    render() {\n        return (\n            <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall, {backgroundColor: LegendColors.yellow, shadowColor: LegendColors.yellow, shadowOpacity: ShadowOpacity}]}>\n                <Text style={[styles.chartTitle, styles.indicatorLight]}>{chartTitles.currentPositive}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueBold, styles.indicatorLight]}>{latestUpdateData().totalCurrentCases}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueIncr, styles.indicatorLight]}>{latestUpdateData().currentCasesVariation} ({latestUpdateData().currentCasesVariationPercentage}%)</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 27/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\n\nimport React, {Component} from 'react';\nimport LegendColors from \"../../ui/theme/legendColors\";\nimport {styles} from \"../../ui/theme/style\";\nimport {Text, View} from \"react-native\";\nimport {chartTitles} from \"../../ui/contents/strings\";\nimport latestUpdateData from \"../../logic/latestUpdateData\";\nimport {ShadowOpacity} from \"../../ui/contents/params\";\n\nexport default class CardSwab extends Component{\n\n\n    render() {\n        return (\n            <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall, {backgroundColor: LegendColors.blue, shadowColor: LegendColors.lightblue, shadowOpacity: ShadowOpacity}]}>\n                <Text style={[styles.chartTitle, styles.indicatorLight]}>{chartTitles.swab}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueBold, styles.indicatorLight]}>{latestUpdateData().swab}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueIncr,  styles.indicatorLight]}>{latestUpdateData().swabVariation} ({latestUpdateData().swabVariationPercentage}%)</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 27/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {styles} from \"../../ui/theme/style\";\nimport {Text, View} from \"react-native\";\nimport {chartTitles, dataDescription} from \"../../ui/contents/strings\";\nimport latestUpdateData from \"../../logic/latestUpdateData\";\n\nexport default class CardDate extends Component{\n\n\n    render() {\n        return (\n            <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                <Text style={[styles.chartTitle]}>{chartTitles.lastUpdateDate}{latestUpdateData().lastUpdateDate}</Text>\n                <Text style={[styles.indicatorValue, styles.chartDescription]}>{dataDescription.lastUpdate}</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 19/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {TouchableOpacity} from \"react-native\";\nimport MainScrollableContents from \"../mainScrollableContainer\";\nimport CardTotalCases from \"../../../data_representation/resume_cards/cardTotalCases\";\nimport CardRecovered from \"../../../data_representation/resume_cards/cardRecovered\";\nimport CardDied from \"../../../data_representation/resume_cards/cardDied\";\nimport CardCurrentPositive from \"../../../data_representation/resume_cards/cardCurrentPositive\";\nimport {navigate} from \"../../../utils/rootNavigationRef\";\nimport {screenTitles} from \"../../contents/strings\";\nimport CardSwab from \"../../../data_representation/resume_cards/cardSwab\";\nimport CardDate from \"../../../data_representation/resume_cards/cardDate\";\n\nclass LatestUpdateComponent extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        return (\n\n            <MainScrollableContents>\n\n                <>\n                    <TouchableOpacity onPress={() => {\n                        navigate(screenTitles.newCases);\n                    }}>\n                        <CardTotalCases/>\n                    </TouchableOpacity>\n\n                    <TouchableOpacity onPress={() => {\n                        navigate(screenTitles.currentPositive);\n                    }}>\n                        <CardCurrentPositive/>\n                    </TouchableOpacity>\n\n\n                    <TouchableOpacity onPress={() => {\n                        navigate(screenTitles.recovered);\n                    }}>\n                        <CardRecovered/>\n                    </TouchableOpacity>\n\n                    <TouchableOpacity onPress={() => {\n                        navigate(screenTitles.swab);\n                    }}>\n                        <CardSwab/>\n                    </TouchableOpacity>\n\n                    <TouchableOpacity onPress={() => {\n                        navigate(screenTitles.died);\n                    }}>\n                        <CardDied/>\n                    </TouchableOpacity>\n\n                    <CardDate/>\n                </>\n\n            </MainScrollableContents>\n        )\n    }\n}\n\nexport default LatestUpdateComponent;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React from 'react';\nimport {DrawerActions, useNavigation} from \"@react-navigation/native\";\nimport {View, Platform} from \"react-native\";\nimport {TouchableOpacity} from \"react-native-gesture-handler\";\nimport { Ionicons } from '@expo/vector-icons';\nimport Colors from \"../../theme/colors\";\nimport {Appearance} from \"react-native-appearance\";\n\nlet colorScheme = Appearance.getColorScheme();\n\nconst HeaderLeft = () => {\n    const navigation = useNavigation();\n\n    return (\n        <View style={{flexDirection: 'row'}}>\n            <TouchableOpacity\n                onPress={() => {\n                    navigation.dispatch(DrawerActions.openDrawer());\n                }}\n                style={{marginLeft: Platform.OS === 'ios' ? 25 : 25}}>\n                <Ionicons name=\"ios-menu\" size={32} color={colorScheme === 'dark' ? Colors.darkMode_basic : Colors.basic} />\n            </TouchableOpacity>\n        </View>\n    );\n};\n\nexport default HeaderLeft;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 29/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport {Dimensions} from \"react-native\";\nimport React, {Component} from \"react\";\nimport {createStackNavigator} from \"@react-navigation/stack\";\nimport {dimens} from \"../theme/dimens\";\nimport HeaderLeft from \"../components/header/headerMenuButton\";\nimport {styles} from \"../theme/style\";\nimport {RegionList} from \"../contents/locationsList\";\nimport SelectedLocation from \"../../logic/selectedLocation\";\nimport {EventRegister} from \"react-native-event-listeners\";\n\nconst Stack = createStackNavigator();\nconst dimensions = Dimensions.get('window').width;\nlet dataChangedListener;\n\n\nexport default class ScreenContainer extends Component  {\n\n    constructor(props) {\n        super(props);\n        this.state = {location: RegionList[SelectedLocation.getLocation()].label}\n    }\n\n    componentWillMount() {\n        dataChangedListener = EventRegister.addEventListener('locationChanged', (data) => {\n            this.setState({location: RegionList[SelectedLocation.getLocation()].label});\n        });\n    }\n\n    componentWillUnmount() {\n        EventRegister.removeEventListener(dataChangedListener)\n    }\n\n    render() {\n        return (\n            <Stack.Navigator mode={\"modal\"}>\n                <Stack.Screen\n                    options={{\n                        headerStyle: [styles.header, styles.headerShadow],\n                        headerTitleStyle: [styles.headerTitle],\n                        headerLeft: dimensions < dimens.largeScreen ? ({}) => <HeaderLeft /> : null,\n                        animationEnabled: false,\n                        title: this.props.title + ' > ' + this.state.location\n                    }}\n                    component={() => this.props.component}\n                    name={this.props.title + ' > ' + this.state.location}\n                />\n            </Stack.Navigator>\n\n        );\n    }\n\n\n}\n\n\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React from \"react\";\nimport {screenTitles} from \"../contents/strings\";\nimport LatestUpdateComponent from \"../components/latest_updates/latestUpateComponent\";\nimport ScreenContainer from \"../components/screenContainer\";\n\n\nfunction LatestUpdateResumeScreen({ navigation }) {\n\n    return (\n        <ScreenContainer title={screenTitles.latestUpdateResume} component={<LatestUpdateComponent/>} />\n    );\n}\n\nexport default LatestUpdateResumeScreen;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 28/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nexport function hexToRgb(hex) {\n    let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nexport function reduceOpacity(hex, points) {\n    let colorRGB = hexToRgb(hex)\n    return `rgba(${colorRGB.r}, ${colorRGB.g}, ${colorRGB.b}, ${1 - points * 0.1})`\n}\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 31/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nlet intervalSelectorFilter = [\n    {\n        state: '_1W',\n        name: 'settimana',\n        field: 7,\n    },\n    {\n        state: '_1M',\n        name: 'mese',\n        field: 30,\n    },\n    {\n        state: '_MAX',\n        name: 'max',\n        field: -1,\n    }\n];\n\nexport default intervalSelectorFilter;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 01/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\n/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 30/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport Records from \"./dataset\";\nimport dateToString from \"../utils/dateToString\";\nimport {lineChartNumLabels} from \"../ui/contents/params\";\n\nlet dataToReturn = {\n    dateLabels: [],\n    dateLabelsComplete: [],\n};\n\nconst DateLabels = (range) => {\n\n    let data = Records.getRecords();\n\n\n    if(data !== null){\n\n        dataToReturn.dateLabels = [];\n        dataToReturn.dateLabelsComplete = [];\n\n        if( dataToReturn){\n            let start = range === -1 || range === undefined ? 1 : data.length - range;\n            let incr = Math.round(((data.length - start)) / lineChartNumLabels(range));\n            for (let i = start; i < data.length; i+=incr){\n                i = Math.round(i)\n                dataToReturn.dateLabels.push(dateToString(data[i]['data']));\n            }\n            for (let i = start; i < data.length; i++){\n                dataToReturn.dateLabelsComplete.push(dateToString(data[i]['data']));\n            }\n        }\n\n    }\n    return dataToReturn;\n};\n\n\nexport default DateLabels;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 08/09/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport {Circle, Line, Svg, Text as TextSVG} from \"react-native-svg\";\nimport darkMode from \"../../ui/theme/darkModeDetector\";\nimport Colors from \"../../ui/theme/colors\";\nimport React, {Component, Fragment} from \"react\";\nimport {Dimensions} from \"react-native\";\nimport {dynamicDimens} from \"../../ui/theme/dimens\";\n\n\nclass LineChartDecorator extends Component{\n\n    constructor(props) {\n        super(props);\n    }\n\n    getXText = (x) => {\n        if(x > dynamicDimens.chartFullWidth - 150){\n            return x - 70;\n        }\n        else {\n            if(x < 100){\n                return x + 50;\n            }\n            return x;\n        }\n\n    }\n\n    render() {\n        return (\n            <Fragment key={Math.random()}>\n                <Svg>\n                    <Line\n                        x1={this.props.x}\n                        y1=\"0\"\n                        x2={this.props.x}\n                        y2=\"190\"\n                        stroke={(darkMode() ? Colors.darkMode_basicTransparent : Colors.basicTransparent)}\n                        strokeWidth=\"1\"/>\n                    <Circle\n                        cx={this.props.x}\n                        cy={this.props.y}\n                        r=\"10\"\n                        strokeWidth=\"1\"\n                        stroke={(darkMode() ? Colors.darkMode_basicElevation : Colors.basicElevation)}\n                        fill={this.props.color}/>\n                    <TextSVG\n                        x={this.getXText(this.props.x)}\n                        y={10}\n                        fill={(darkMode() ? Colors.darkMode_basic : Colors.basic)}\n                        fontSize=\"14\"\n                        fontWeight=\"bold\"\n                        textAnchor=\"middle\">\n                        {this.props.value === null ? 'N/D' : this.props.selectedDate + ' - ' + this.props.value.toLocaleString('it')}\n                    </TextSVG>\n                </Svg>\n            </Fragment>\n        );\n    }\n}\n\nexport default LineChartDecorator;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 23/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {PureComponent} from 'react';\nimport {FlatList, View} from 'react-native';\nimport {Chip} from 'react-native-paper';\nimport {LineChart} from \"react-native-chart-kit\";\nimport {dimens, dynamicDimens} from \"../../ui/theme/dimens\";\nimport Colors from \"../../ui/theme/colors\";\nimport {hexToRgb} from \"../../utils/colorConverter\";\nimport intervalSelectorFilter from \"../../ui/contents/intervalSelectorData\";\nimport DateLabels from \"../../logic/retrieveTimeLabels\";\nimport darkMode from \"../../ui/theme/darkModeDetector\";\nimport {RegionList} from \"../../ui/contents/locationsList\";\nimport SelectedLocation from \"../../logic/selectedLocation\";\nimport LineChartDecorator from \"./lineChartDecorator\";\n\nexport default class MyLineChart extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            _1W: true,\n            _1M: false,\n            _MAX: false,\n            data: {\n                completeDate: DateLabels(7).dateLabelsComplete,\n                labels: DateLabels(7).dateLabels,\n                datasets: [\n                    {\n                        data: this.props.data.slice(Math.max(this.props.data.length - 7, 0))\n                    }\n                ]\n            },\n            filter: 7,\n            x: 0,\n            y: 0,\n            location: RegionList[SelectedLocation.getLocation()].label,\n            visible: false,\n            value: 0,\n            selectedDate: 0\n        };\n    }\n\n\n    activateFilter(filter) {\n        this.setState({_1W: false, _1M: false, _MAX: false, visible: false});\n        this.setState({[filter.state]: true}, function () {\n\n            this.setState({filter: filter.field}, function () {\n                if (this.state.filter === -1) {\n                    this.setState({\n                        data: {\n                            completeDate: DateLabels(this.state.filter).dateLabelsComplete,\n                            labels: DateLabels(this.state.filter).dateLabels,\n                            datasets: [\n                                {\n                                    data: this.props.data\n                                }\n                            ]\n                        },\n                    });\n                } else {\n                    this.setState({\n                            data: {\n                                completeDate: DateLabels(this.state.filter).dateLabelsComplete,\n                                labels: DateLabels(this.state.filter).dateLabels,\n                                datasets: [\n                                    {\n                                        data: this.props.data.slice(Math.max(this.props.data.length - this.state.filter, 0))\n                                    }\n                                ]\n                            },\n                        },\n                    );\n                }\n            });\n        });\n        this.forceUpdate();\n    }\n\n    returnState(stateString) {\n        switch (stateString) {\n            case '_1W':\n                return this.state._1W;\n            case '_1M':\n                return this.state._1M;\n            case '_MAX':\n                return this.state._MAX;\n        }\n    }\n\n    decorator = () => {\n        return this.state.visible ?\n            <LineChartDecorator color={this.props.color} x={this.state.x} y={this.state.y}\n                                selectedDate={this.state.selectedDate}\n                                value={this.state.value}/> : null\n    }\n\n\n    render() {\n        const colorRGB = hexToRgb(this.props.color);\n        return (\n            <View style={{marginTop: 20}}>\n\n                <View style={{marginTop: 8}}>\n                    <FlatList\n                        style={{marginBottom: 20}}\n                        data={intervalSelectorFilter}\n                        renderItem={({item}) => (\n                            <Chip\n                                onPress={() => this.activateFilter(item)}\n                                selected={this.state.filter === item.state.field}\n                                textStyle={{\n                                    color: this.returnState(item.state) ? '#fff' : darkMode() ? Colors.darkMode_basic : Colors.basic,\n                                    fontWeight: this.returnState(item.state) ? '700' : '400'\n                                }}\n                                style={[\n                                    {\n                                        backgroundColor: this.returnState(item.state) ? this.props.color : (darkMode() ? Colors.darkMode_basicTransparent : Colors.basicTransparent),\n                                        marginRight: 5,\n                                    }]}>\n                                {item.name}\n                            </Chip>\n                        )}\n                        numColumns={1}\n                        horizontal={true}\n                        showsHorizontalScrollIndicator={false}\n                        keyExtractor={(item, index) => index.toString()}\n                    />\n                </View>\n\n                <LineChart\n                    data={this.state.data}\n                    width={dynamicDimens.chartFullWidth}\n                    height={dimens.lineChartHeight}\n                    yAxisLabel=\"\"\n                    yAxisSuffix=\"\"\n                    whitScrollableDot={true}\n                    withVerticalLines={false}\n                    yAxisInterval={1}\n                    chartConfig={{\n                        backgroundColor: darkMode() ? Colors.darkMode_basicElevation : Colors.basicElevation,\n                        backgroundGradientFrom: darkMode() ? Colors.darkMode_basicElevation : Colors.basicElevation,\n                        backgroundGradientTo: darkMode() ? Colors.darkMode_basicElevation : Colors.basicElevation,\n                        decimalPlaces: this.props.decimalPlaces === undefined ? 0 : this.props.decimalPlaces,\n                        color: (opacity = 1) => `rgba(${colorRGB.r}, ${colorRGB.g}, ${colorRGB.b}, ${darkMode() ? opacity * 3 : opacity * 3})`,\n                        labelColor: (opacity = 1) => (darkMode() ? Colors.darkMode_basic : Colors.basic),\n                        propsForDots: {\n                            r: \"1\",\n                            strokeWidth: \"0\",\n                            stroke: this.props.color\n                        },\n                        propsForBackgroundLines: {\n                            stroke: darkMode() ? Colors.darkMode_basicTransparent : Colors.basicTransparent,\n                        }\n                    }}\n                    //bezier\n                    style={{\n                        marginVertical: 8,\n                        borderRadius: 16\n                    }}\n\n                    decorator={this.decorator}\n\n                    onDataPointClick={(data) => {\n\n                        let isSamePoint = (this.state.x === data.x\n                            && this.state.y === data.y);\n\n                        isSamePoint ?\n                            this.setState({x: data.x, value: data.value, selectedDate: this.state.data.completeDate[data.index], y: data.y, visible: !this.state.visible})\n                            :\n                            this.setState({x: data.x, value: data.value, selectedDate: this.state.data.completeDate[data.index], y: data.y, visible: true});\n\n                    }}\n                />\n\n            </View>\n\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 09/09/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {Text, View} from \"react-native\";\nimport {styles} from \"../../theme/style\";\nimport MyLineChart from \"../../../data_representation/charts/lineChart\";\n\nexport default class LineChartCard extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n        return (\n            <View style={[styles.cardGeneric, styles.cardShadow, styles.cardBig]}>\n                <Text style={[styles.chartTitle]}>{this.props.title}</Text>\n                <MyLineChart color={this.props.color} data={this.props.data} />\n                <Text style={styles.chartDescription}>{this.props.description}</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 19/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {Text, View} from \"react-native\";\nimport {styles} from \"../../theme/style\";\nimport MainScrollableContents from \"../mainScrollableContainer\";\nimport {chartTitles, dataDescription} from \"../../contents/strings\";\nimport CardTotalCases from \"../../../data_representation/resume_cards/cardTotalCases\";\nimport LegendColors from \"../../theme/legendColors\";\nimport NewCasesData from \"../../../logic/newCasesData\";\nimport LineChartCard from \"../cards/lineChartCard\";\nimport {EventRegister} from \"react-native-event-listeners\";\nimport MyProgressCircle from \"../../../data_representation/charts/progressCircle\";\n\nlet dataChangedListener;\n\nclass NewCasesComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { data: NewCasesData(), color: LegendColors.red, value: 0}\n    }\n\n    componentDidMount() {\n        dataChangedListener = EventRegister.addEventListener('locationChanged', (data) => {\n            this.updateData();\n        });\n    }\n\n    componentWillUnmount() {\n        EventRegister.removeEventListener(dataChangedListener)\n    }\n\n    updateData(){\n        this.setState({data: NewCasesData()});\n    }\n\n    render() {\n        return (\n            <MainScrollableContents>\n                    <>\n                        <CardTotalCases />\n\n                        <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                            <Text style={[styles.chartTitle]}>{chartTitles.totalCasesPercentage}</Text>\n                            <MyProgressCircle value={this.state.data.percentageOfTotal} color={LegendColors.red}/>\n                            <Text style={styles.chartDescription}>{dataDescription.totalCasesPercentage}</Text>\n                        </View>\n\n                        <LineChartCard\n                            key={this.state.data}\n                            title={chartTitles.totalCasesCurve}\n                            color={this.state.color}\n                            data={this.state.data.newCasesTrendAbsolute}\n                            description={dataDescription.totalCases} />\n\n                        <LineChartCard\n                            key={this.state.data}\n                            title={chartTitles.newCasesCurve}\n                            color={this.state.color}\n                            data={this.state.data.newCasesTrendDayValue}\n                            description={dataDescription.newCases} />\n                    </>\n            </MainScrollableContents>\n        )\n    }\n\n}\n\nexport default NewCasesComponent;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 28/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\n\nimport React, {Component} from 'react';\nimport {Text, View} from 'react-native';\nimport Colors from \"../../ui/theme/colors\";\nimport {AnimatedCircularProgress} from \"react-native-circular-progress/index\";\nimport LegendColors from \"../../ui/theme/legendColors\";\nimport {dimens} from \"../../ui/theme/dimens\";\nimport darkMode from \"../../ui/theme/darkModeDetector\";\n\n\nexport default  class MyProgressCircle extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <View style={{width: '100%', alignItems: 'center'}}>\n                <AnimatedCircularProgress\n                    size={dimens.pieChartRadius}\n                    width={8}\n                    fill={this.props.value}\n                    padding={10}\n                    tintColor={this.props.color}\n                    onAnimationComplete={() => console.log('onAnimationComplete')}\n                    backgroundColor={(darkMode() ? Colors.darkMode_basicTransparent : Colors.basicTransparent)}>\n                    {\n                        (fill) => (\n                            <Text style={{color: (darkMode() ? Colors.darkMode_basic : Colors.basic)}}>\n                                {this.props.value}%\n                            </Text>\n                        )\n                    }\n                </AnimatedCircularProgress>\n            </View>\n\n        );\n    }\n}\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\n\nimport React from \"react\";\nimport {screenTitles} from \"../contents/strings\";\nimport NewCasesComponent from \"../components/new_cases/newCasesComponent\";\nimport ScreenContainer from \"../components/screenContainer\";\n\nfunction NewCasesScreen({ navigation }) {\n\n    return (\n        <ScreenContainer title={screenTitles.newCases} component={<NewCasesComponent/>} />\n    );\n}\n\nexport default NewCasesScreen;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 29/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport Records from \"./dataset\";\n\nlet dataToReturn = {\n    deathsRatio: 0\n};\n\nconst CurrentPositiveData = (data) => {\n\n    if(data === undefined){\n        data = Records.getRecords();\n    }\n\n    if(data !== null){\n        let d = data[data.length - 1];\n\n        dataToReturn.positiveRatio = (Math.round(d['totale_positivi'] / d['totale_casi'] * 100 * 100) / 100).toFixed(2);\n\n    }\n    return dataToReturn;\n};\n\n\nexport default CurrentPositiveData;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 03/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {Text, View} from \"react-native\";\nimport {styles} from \"../../ui/theme/style\";\nimport {chartTitles} from \"../../ui/contents/strings\";\nimport PositiveDeltaData from \"../../logic/positiveDeltaData\";\n\nexport default class CardHomeQuarantine extends Component{\n\n    render() {\n        return (\n            <View  style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                <Text style={[styles.chartTitle]}>{chartTitles.positiveHomeQuarantine}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueBold]}>{PositiveDeltaData().homeQuarantine} ({PositiveDeltaData().homeQuarantinePercentage}%)</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueIncr]}>{PositiveDeltaData().homeQuarantineVariation} ({PositiveDeltaData().homeQuarantineVariationPercentage}%)</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 03/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {Text, View} from \"react-native\";\nimport {styles} from \"../../ui/theme/style\";\nimport {chartTitles} from \"../../ui/contents/strings\";\nimport PositiveDeltaData from \"../../logic/positiveDeltaData\";\n\nexport default class CardHospitalizedWithSymptoms extends Component{\n\n    render() {\n        return (\n            <View  style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                <Text style={[styles.chartTitle]}>{chartTitles.hospitalizedWithSymptoms}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueBold]}>{PositiveDeltaData().hospitalized} ({PositiveDeltaData().hospitalizedPercentage}%)</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueIncr]}>{PositiveDeltaData().hospitalizedVariation} ({PositiveDeltaData().hospitalizedVariationPercentage}%)</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 03/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {Text, View} from \"react-native\";\nimport {styles} from \"../../ui/theme/style\";\nimport {chartTitles} from \"../../ui/contents/strings\";\nimport PositiveDeltaData from \"../../logic/positiveDeltaData\";\n\nexport default class CardCritical extends Component{\n\n    render() {\n        return (\n            <View  style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                <Text style={[styles.chartTitle]}>{chartTitles.critical}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueBold]}>{PositiveDeltaData().critical} ({PositiveDeltaData().criticalPercentage}%)</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueIncr]}>{PositiveDeltaData().criticalVariation} ({PositiveDeltaData().criticalVariationPercentage}%)</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 05/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {Text, View} from 'react-native';\nimport {styles} from \"../../ui/theme/style\";\n\nexport default class ChartColorLegend extends Component{\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <View style={styles.legendContainer}>\n                <View style={[styles.legendColorSquare, { backgroundColor: this.props.color}]}/>\n                <Text style={styles.legendTitle}>{this.props.title}</Text>\n            </View>\n        );\n    }\n\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 03/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\n\nimport React from 'react'\nimport {StackedAreaChart, YAxis, XAxis, Grid} from 'react-native-svg-charts'\nimport * as shape from 'd3-shape'\nimport {FlatList, View} from 'react-native'\nimport {hexToRgb} from \"../../utils/colorConverter\";\nimport intervalSelectorFilter from \"../../ui/contents/intervalSelectorData\";\nimport {Chip} from \"react-native-paper\";\nimport Colors from \"../../ui/theme/colors\";\nimport DateLabels from \"../../logic/retrieveTimeLabels\";\nimport {styles} from \"../../ui/theme/style\";\nimport ChartColorLegend from \"./chartColorLegend\";\nimport darkMode from \"../../ui/theme/darkModeDetector\";\n\nclass MyStackAreaChart extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            _1W: true,\n            _1M: false,\n            _MAX: false,\n            data: this.props.data.slice(Math.max(this.props.data.length - 7, 0)),\n            filter: 7,\n            labels: DateLabels(7).dateLabels,\n            x: 0,\n            y: 0,\n            visible: false,\n            value: 0\n        };\n    }\n\n    activateFilter(filter) {\n        this.setState({_1W: false, _1M: false, _MAX: false, visible: false});\n        this.setState({[filter.state]: true}, function () {\n\n            this.setState({filter: filter.field}, function () {\n                if (this.state.filter === -1) {\n                    this.setState({data: this.props.data}, function () {\n                        this.setState({labels: DateLabels(this.state.filter).dateLabels});\n                    });\n                } else {\n                    this.setState({data: this.props.data.slice(Math.max(this.props.data.length - this.state.filter, 0))}, function () {\n                        this.setState({labels: DateLabels(this.state.filter).dateLabels});\n                    });\n                }\n            });\n        });\n        this.forceUpdate();\n    }\n\n    returnState(stateString) {\n        switch (stateString) {\n            case '_1W':\n                return this.state._1W;\n            case '_1M':\n                return this.state._1M;\n            case '_MAX':\n                return this.state._MAX;\n        }\n    }\n\n    deOpacizeColors(colors, opacity = 0.7) {\n        let color1 = hexToRgb(colors[0]);\n        let color2 = hexToRgb(colors[1]);\n        let color3 = hexToRgb(colors[2]);\n        return [`rgba(${color1.r}, ${color1.g}, ${color1.b}, ${opacity})`, `rgba(${color2.r}, ${color2.g}, ${color2.b}, ${opacity})`, `rgba(${color3.r}, ${color3.g}, ${color3.b}, ${opacity})`]\n    }\n\n    render() {\n\n        const colorRGB = hexToRgb(this.props.color);\n        const colors = this.props.colors === undefined ? [`rgba(${colorRGB.r}, ${colorRGB.g}, ${colorRGB.b}, 0.9)`, `rgba(${colorRGB.r}, ${colorRGB.g}, ${colorRGB.b}, 0.6)`, `rgba(${colorRGB.r}, ${colorRGB.g}, ${colorRGB.b}, 0.3)`] : this.deOpacizeColors(this.props.colors)\n        const keys = this.props.keyValues\n        const axesSvg = {fontSize: 12, fill: (darkMode() ? Colors.darkMode_basic : Colors.basic)};\n        const gridSvg = {\n            fill: darkMode() ? Colors.darkMode_basicTransparent : Colors.basicTransparent,\n            strokeDasharray: [5, 8],\n            strokeOpacity: 0.6\n        }\n\n        return (\n            <View>\n                <View style={{marginTop: 20}}>\n                    <FlatList\n                        style={{marginBottom: 20}}\n                        data={intervalSelectorFilter}\n                        renderItem={({item}) => (\n                            <Chip\n                                onPress={() => this.activateFilter(item)}\n                                selected={this.state.filter === item.state.field}\n                                textStyle={{\n                                    color: this.returnState(item.state) ? '#fff' : darkMode() ? Colors.darkMode_basic : Colors.basic,\n                                    fontWeight: this.returnState(item.state) ? '700' : '400'\n                                }}\n                                style={[\n                                    {\n                                        backgroundColor: this.returnState(item.state) ? this.props.color : (darkMode() ? Colors.darkMode_basicTransparent : Colors.basicTransparent),\n                                        marginRight: 5,\n                                    }]}>\n                                {item.name}\n                            </Chip>\n                        )}\n                        numColumns={1}\n                        horizontal={true}\n                        showsHorizontalScrollIndicator={false}\n                        keyExtractor={(item, index) => index.toString()}\n                    />\n                </View>\n                <View style={{flexDirection: 'row', marginTop: 10, height: 220}}>\n                    <View style={{flex: 1, marginLeft: 50}}>\n                        <StackedAreaChart\n                            style={{flex: 1}}\n                            verticalContentInset={{top: 20, bottom: 20}}\n                            data={this.state.data}\n                            keys={keys}\n                            colors={colors}\n\n                            curve={shape.curveLinear}\n                            animationDuration={200}\n                            numberOfTicks={5}\n                            svg={gridSvg}\n                        >\n                            <Grid\n                                direction={Grid.Direction.HORIZONTAL}\n                                belowChart={true}\n                                svg={gridSvg}\n                            />\n                        </StackedAreaChart>\n                    </View>\n                    <YAxis\n                        style={{position: 'absolute', top: 0, bottom: 0}}\n                        data={StackedAreaChart.extractDataPoints(this.state.data, keys)}\n                        contentInset={{top: 10, bottom: 10}}\n                        numberOfTicks={5}\n                        svg={{\n                            fontSize: 12,\n                            fill: (darkMode() ? Colors.darkMode_basic : Colors.basic),\n                            alignmentBaseline: 'baseline',\n                            baselineShift: '3',\n                        }}\n                    />\n                </View>\n                <XAxis\n                    style={{marginLeft: 50, marginTop: 10, height: 10}}\n                    data={this.state.data}\n                    numberOfTicks={4}\n                    formatLabel={(index) => this.state.data[index].date}\n                    contentInset={{left: 10, right: 10}}\n                    svg={axesSvg}\n                />\n\n                {/* Legend */}\n                <View style={styles.legendExternalContainer}>\n                    <ChartColorLegend\n                        title={this.props.legend[2]}\n                        color={colors[0]}/>\n\n                    <ChartColorLegend\n                        title={this.props.legend[1]}\n                        color={colors[1]}/>\n\n                    <ChartColorLegend\n                        title={this.props.legend[0]}\n                        color={colors[2]}/>\n\n                </View>\n\n            </View>\n        )\n    }\n}\n\nexport default MyStackAreaChart;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 19/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {Text, View} from \"react-native\";\nimport {styles} from \"../../theme/style\";\nimport MainScrollableContents from \"../mainScrollableContainer\";\nimport CardCurrentPositive from \"../../../data_representation/resume_cards/cardCurrentPositive\";\nimport {chartTitles, dataDescription} from \"../../contents/strings\";\nimport MyProgressCircle from \"../../../data_representation/charts/progressCircle\";\nimport LegendColors from \"../../theme/legendColors\";\nimport CurrentPositiveData from \"../../../logic/currentPositiveData\";\nimport PositiveDeltaData from \"../../../logic/positiveDeltaData\";\nimport CardHomeQuarantine from \"../../../data_representation/resume_cards/cardHomeQuarantine\";\nimport CardHospitalizedWithSymptoms from \"../../../data_representation/resume_cards/cardHospitalizedWithSymptoms\";\nimport CardCritical from \"../../../data_representation/resume_cards/cardCritical\";\nimport StackedAreaChart from \"../../../data_representation/charts/stackedAreaChart\";\nimport PositiveRepartitionData from \"../../../logic/positiveRepartitionData\";\nimport LineChartCard from \"../cards/lineChartCard\";\n\nclass CurrentPositiveComponent extends Component {\n\n    constructor() {\n        super();\n        this.state = {data: PositiveDeltaData(), color: LegendColors.yellow}\n    }\n\n    render() {\n        return (\n            <MainScrollableContents>\n                <>\n                    <CardCurrentPositive />\n\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                        <Text style={[styles.chartTitle]}>{chartTitles.currentPositivePercentage}</Text>\n                        <MyProgressCircle value={CurrentPositiveData().positiveRatio} color={LegendColors.yellow}/>\n                        <Text style={styles.chartDescription}>{chartTitles.positivePercentageDescription}</Text>\n                    </View>\n\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                        <Text style={[styles.chartTitle]}>{chartTitles.positiveCasesAreaPercentage}</Text>\n                        <MyProgressCircle value={this.state.data.percentageOfTotal} color={LegendColors.yellow}/>\n                        <Text style={styles.chartDescription}>{chartTitles.positiveCasesAreaPercentage}</Text>\n                    </View>\n\n                    <LineChartCard\n                        title={chartTitles.positiveTrendAbsolute}\n                        color={this.state.color}\n                        data={this.state.data.deltaTrendAbsolute}\n                        description={dataDescription.positiveTotal} />\n\n                    <LineChartCard\n                        title={chartTitles.positiveTrendVariation}\n                        color={this.state.color}\n                        data={this.state.data.deltaTrendDayVariation}\n                        description={dataDescription.positiveVariation} />\n\n                    <CardHomeQuarantine />\n\n                    <CardHospitalizedWithSymptoms />\n\n                    <CardCritical />\n\n                    <LineChartCard\n                        title={chartTitles.criticalTrendAbsolute}\n                        color={this.state.color}\n                        data={this.state.data.criticalTrendAbsolute}\n                        description={dataDescription.criticalTrendAbsolute} />\n\n                </>\n            </MainScrollableContents>\n        )\n    }\n\n}\n\nexport default CurrentPositiveComponent;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React from \"react\";\nimport {screenTitles} from \"../contents/strings\";\nimport ScreenContainer from \"../components/screenContainer\";\nimport CurrentPositiveComponent from \"../components/current_positive/currentPositiveComponent\";\n\n\n\nfunction CurrentPositiveScreen({ navigation }) {\n\n    return (\n        <ScreenContainer title={screenTitles.currentPositive} component={<CurrentPositiveComponent/>} />\n    );\n}\n\nexport default CurrentPositiveScreen;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 19/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {Text, View} from \"react-native\";\nimport {styles} from \"../../theme/style\";\nimport MainScrollableContents from \"../mainScrollableContainer\";\nimport CardRecovered from \"../../../data_representation/resume_cards/cardRecovered\";\nimport {chartTitles, dataDescription} from \"../../contents/strings\";\nimport MyProgressCircle from \"../../../data_representation/charts/progressCircle\";\nimport LegendColors from \"../../theme/legendColors\";\nimport RecoveredData from \"../../../logic/recoveredData\";\nimport LineChartCard from \"../cards/lineChartCard\";\n\nclass RecoveredComponent extends Component {\n\n    constructor() {\n        super();\n        this.state = {data: RecoveredData(), color: LegendColors.green}\n    }\n\n    render() {\n        return (\n            <MainScrollableContents>\n\n                <>\n                    <CardRecovered light={true}/>\n\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                        <Text style={[styles.chartTitle]}>{chartTitles.recoveredPercentage}</Text>\n                        <MyProgressCircle value={this.state.data.recoveredRatio} color={LegendColors.green}/>\n                        <Text style={styles.chartDescription}>{chartTitles.recoveredPercentageDescription}</Text>\n                    </View>\n\n                    <LineChartCard\n                        title={chartTitles.recoveredTrend}\n                        color={this.state.color}\n                        data={this.state.data.recoveredTrendAbsolute}\n                        description={dataDescription.recoveredTotal}/>\n\n                    <LineChartCard\n                        title={chartTitles.recoveredTrendDay}\n                        color={this.state.color}\n                        data={this.state.data.recoveredTrendDayValue}\n                        description={dataDescription.recoveredVariation}/>\n\n                    <LineChartCard\n                        title={chartTitles.recoveredTrendProportional}\n                        color={this.state.color}\n                        data={this.state.data.recoveredTrendProportional}\n                        description={dataDescription.recoveredTrendProportional}/>\n                </>\n\n            </MainScrollableContents>\n        )\n    }\n\n}\n\nexport default RecoveredComponent;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React from \"react\";\nimport {screenTitles} from \"../contents/strings\";\nimport RecoveredComponent from \"../components/recovered/recoveredComponent\";\nimport ScreenContainer from \"../components/screenContainer\";\n\nfunction RecoveredScreen({ navigation }) {\n\n    return (\n        <ScreenContainer title={screenTitles.recovered} component={<RecoveredComponent/>} />\n    );\n\n}\n\nexport default RecoveredScreen;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 29/07/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\n\n\nimport React, {Component} from 'react';\nimport {styles} from \"../../ui/theme/style\";\nimport {Text, View} from \"react-native\";\nimport {chartTitles} from \"../../ui/contents/strings\";\nimport latestUpdateData from \"../../logic/latestUpdateData\";\nimport Colors from \"../../ui/theme/colors\";\n\nexport default class CardTestedCases extends Component{\n\n    render() {\n        return (\n            <View  style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                <Text style={[styles.chartTitle]}>{chartTitles.testedCases}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueBold]}>{latestUpdateData().testedCases}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueIncr]}>{latestUpdateData().testedCasesVariation} ({latestUpdateData().testedCasesVariationPercentage}%)</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2021\n * Created by mauromarini on 06/05/21\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {styles} from \"../../ui/theme/style\";\nimport {Text, View} from \"react-native\";\nimport {chartTitles} from \"../../ui/contents/strings\";\nimport latestUpdateData from \"../../logic/latestUpdateData\";\nimport Colors from \"../../ui/theme/colors\";\n\nexport default class CardStandardSwabs extends Component{\n\n    render() {\n        return (\n            <View  style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                <Text style={[styles.chartTitle]}>{chartTitles.standardSwabs}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueBold]}>{latestUpdateData().standardTestCumulative}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueIncr]}>{latestUpdateData().standardTestVariation} ({latestUpdateData().standardTestVariationPercentage}%)</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2021\n * Created by mauromarini on 06/05/21\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {styles} from \"../../ui/theme/style\";\nimport {Text, View} from \"react-native\";\nimport {chartTitles} from \"../../ui/contents/strings\";\nimport latestUpdateData from \"../../logic/latestUpdateData\";\nimport Colors from \"../../ui/theme/colors\";\n\nexport default class CardRapidSwabsSwabs extends Component{\n\n    render() {\n        return (\n            <View  style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                <Text style={[styles.chartTitle]}>{chartTitles.rapidSwabs}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueBold]}>{latestUpdateData().rapidTestCumulative}</Text>\n                <Text style={[styles.indicatorValue, styles.indicatorValueIncr]}>{latestUpdateData().rapidTestVariation} ({latestUpdateData().rapidTestVariationPercentage}%)</Text>\n            </View>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 19/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {Text, View} from \"react-native\";\nimport {styles} from \"../../theme/style\";\nimport MainScrollableContents from \"../mainScrollableContainer\";\nimport CardSwab from \"../../../data_representation/resume_cards/cardSwab\";\nimport CardTestedCases from \"../../../data_representation/resume_cards/cardTestedCases\";\nimport {chartTitles, dataDescription} from \"../../contents/strings\";\nimport MyProgressCircle from \"../../../data_representation/charts/progressCircle\";\nimport LegendColors from \"../../theme/legendColors\";\nimport SwabData from \"../../../logic/swabData\";\nimport LineChartCard from \"../cards/lineChartCard\";\nimport CardStandardSwabs from \"../../../data_representation/resume_cards/cardStandardSwabs\";\nimport CardRapidSwabsSwabs from \"../../../data_representation/resume_cards/cardRapidSwabs\";\n\nclass SwabsComponent extends Component {\n\n    constructor() {\n        super();\n        this.state = {data: SwabData(), color: LegendColors.blue}\n    }\n\n    render() {\n        return (\n            <MainScrollableContents>\n\n                <>\n                    <CardSwab />\n\n                    <CardTestedCases />\n\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                        <Text style={[styles.chartTitle]}>{chartTitles.swabPositiveRatio}</Text>\n                        <MyProgressCircle value={SwabData().positiveRatio} color={LegendColors.blue}/>\n                        <Text style={styles.chartDescription}>{chartTitles.swabPositiveRatioDescription}</Text>\n                    </View>\n\n\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                        <Text style={[styles.chartTitle]}>{chartTitles.positiveByScreening}</Text>\n                        <MyProgressCircle value={SwabData().positiveByScreening} color={LegendColors.blue}/>\n                        <Text style={styles.chartDescription}>{dataDescription.screening}</Text>\n                    </View>\n\n                    <CardStandardSwabs />\n\n                    <CardRapidSwabsSwabs />\n\n                    <LineChartCard\n                        title={chartTitles.swabTrend}\n                        color={this.state.color}\n                        data={this.state.data.swabTrendAbsolute}\n                        description={dataDescription.swapTrend} />\n\n                    <LineChartCard\n                        title={chartTitles.swabTrendVariation}\n                        color={this.state.color}\n                        data={this.state.data.swabTrendVariation}\n                        description={dataDescription.swabTrendVariation} />\n\n                    <LineChartCard\n                        title={chartTitles.testedCaseTrend}\n                        color={this.state.color}\n                        data={this.state.data.testedCasesTrendAbsolute}\n                        description={dataDescription.testedCaseTrend} />\n\n                    <LineChartCard\n                        title={chartTitles.testedCasesTrendVariation}\n                        color={this.state.color}\n                        data={this.state.data.testedCasesTrendVariation}\n                        description={dataDescription.testedCasesTrendVariation} />\n\n                    <LineChartCard\n                        title={chartTitles.testedAndPositive}\n                        color={this.state.color}\n                        data={this.state.data.percentagePositiveTrend}\n                        description={dataDescription.percentagePositiveTrend} />\n                </>\n            </MainScrollableContents>\n        )\n    }\n\n}\n\nexport default SwabsComponent;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React from \"react\";\nimport {screenTitles} from \"../contents/strings\";\nimport SwabsComponent from \"../components/swabs/swabsComponent\";\nimport ScreenContainer from \"../components/screenContainer\";\n\nfunction SwabsResumeScreen({ navigation }) {\n\n    return (\n        <ScreenContainer title={screenTitles.swab} component={<SwabsComponent/>} />\n    );\n\n}\n\nexport default SwabsResumeScreen;\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 19/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {Text, View} from \"react-native\";\nimport {styles} from \"../../theme/style\";\nimport MainScrollableContents from \"../mainScrollableContainer\";\nimport CardDied from \"../../../data_representation/resume_cards/cardDied\";\nimport MyProgressCircle from \"../../../data_representation/charts/progressCircle\";\nimport LegendColors from \"../../theme/legendColors\";\nimport {chartTitles, dataDescription} from \"../../contents/strings\";\nimport DeathsData from \"../../../logic/deathData\";\nimport MyLineChart from \"../../../data_representation/charts/lineChart\";\n\n\nclass DiedComponent extends Component {\n\n    constructor() {\n        super();\n    }\n\n    render() {\n        return (\n            <MainScrollableContents>\n                <>\n                    <CardDied />\n\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardSmall]}>\n                        <Text style={[styles.chartTitle]}>{chartTitles.deathsRatio}</Text>\n                        <MyProgressCircle value={DeathsData().deathsRatio} color={LegendColors.grey}/>\n                        <Text style={styles.chartDescription}>{chartTitles.deathRatioDescription}</Text>\n                    </View>\n\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardBig]}>\n                        <Text style={[styles.chartTitle]}>{chartTitles.deathTrend}</Text>\n                        <MyLineChart color={LegendColors.grey} data={DeathsData().diedTrendAbsolute} />\n                        <Text style={styles.chartDescription}>{dataDescription.diedTotal}</Text>\n                    </View>\n\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardBig]}>\n                        <Text style={[styles.chartTitle]}>{chartTitles.deathTrendDay}</Text>\n                        <MyLineChart color={LegendColors.grey} data={DeathsData().diedTrendDayValue} />\n                        <Text style={styles.chartDescription}>{dataDescription.diedVariation}</Text>\n                    </View>\n\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardBig]}>\n                        <Text style={[styles.chartTitle]}>{chartTitles.deathTrendProportional}</Text>\n                        <MyLineChart color={LegendColors.grey} decimalPlaces={2} data={DeathsData().diedTrendProportional} />\n                        <Text style={styles.chartDescription}>{dataDescription.diedTrendProportional}</Text>\n                    </View>\n                </>\n            </MainScrollableContents>\n        )\n    }\n}\n\nexport default DiedComponent;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React from \"react\";\nimport {screenTitles} from \"../contents/strings\";\nimport DiedComponent from \"../components/died/diedComponent\";\nimport ScreenContainer from \"../components/screenContainer\";\n\n\nfunction DiedScreen({ navigation }) {\n\n    return (\n        <ScreenContainer title={screenTitles.died} component={<DiedComponent/>}/>\n    );\n}\n\nexport default DiedScreen;\n","/**\n * covid19_dashboard copyright © 2021\n * Created by mauromarini on 26/01/2021\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport {Text, View, Switch} from \"react-native\";\nimport {styles} from \"../../theme/style\";\nimport MainScrollableContents from \"../mainScrollableContainer\";\nimport {chartTitles, dataDescription} from \"../../contents/strings\";\nimport LegendColors from \"../../theme/legendColors\";\nimport StackedAreaChart from \"../../../data_representation/charts/stackedAreaChart\";\nimport TotalCasesRepartitionData from \"../../../logic/totalCasesRepartitionData\";\nimport PositiveRepartitionData from \"../../../logic/positiveRepartitionData\";\nimport Colors from \"../../theme/colors\";\n\nclass RepartitionComponent extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            percentageForTotal: false,\n            percentageForCurrent: false,\n            color: LegendColors.neutral,\n            totalChartTitle: chartTitles.totalCasesRepartionAbsolute,\n            totalChartDescription: dataDescription.totalCasesRepartitionAbsolute,\n            positiveChartTitle: chartTitles.positiveRepartitionAbsolute,\n            positiveChartDescription: dataDescription.positiveRepartitionAbsolute\n        }\n    }\n\n    totalSwitchChange(){\n        if(!this.state.percentageForTotal){\n            this.setState({\n                percentageForTotal: true,\n                totalChartTitle: chartTitles.totalCasesRepartionPercentage,\n                totalChartDescription: dataDescription.totalCasesRepartitionPercentage\n            })\n        }\n        else {\n            this.setState({\n                percentageForTotal: false,\n                totalChartTitle: chartTitles.totalCasesRepartionAbsolute,\n                totalChartDescription: dataDescription.totalCasesRepartitionAbsolute\n            })\n        }\n\n    }\n\n    positiveSwitchChange(){\n        if(!this.state.percentageForCurrent){\n            this.setState({\n                percentageForCurrent: true,\n                positiveChartTitle: chartTitles.positiveRepartitionPercentage,\n                positiveChartDescription: dataDescription.positiveRepartitionPercentage\n            })\n        }\n        else {\n            this.setState({\n                percentageForCurrent: false,\n                positiveChartTitle: chartTitles.positiveRepartitionAbsolute,\n                positiveChartDescription: dataDescription.totalCasesRepartitionAbsolute\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <MainScrollableContents>\n\n                <>\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardBig]}>\n                        <Text style={styles.chartTitle}>{this.state.totalChartTitle}</Text>\n                        <View style={[{flexDirection: \"row\"}]}>\n                            <Text style={[styles.chartManipulationDescription]}>\n                                {dataDescription.showPercentage}\n                            </Text>\n                            <Switch\n                                key={3}\n                                style={{marginLeft: 6}}\n                                onValueChange={() => this.totalSwitchChange()}\n                                value={this.state.percentageForTotal}\n                            />\n                        </View>\n                        {\n                            this.state.percentageForTotal ?\n                                <StackedAreaChart\n                                    key={0}\n                                    color={LegendColors.neutral}\n                                    colors={[LegendColors.grey, LegendColors.yellow, LegendColors.green]}\n                                    keyValues={['death', 'current', 'recovered']}\n                                    legend={[chartTitles.recovered, chartTitles.currentPositive, chartTitles.died]}\n                                    data={TotalCasesRepartitionData().repartitionPercentage}/>\n                                :\n                                <StackedAreaChart\n                                    key={1}\n                                    color={LegendColors.neutral}\n                                    colors={[LegendColors.grey, LegendColors.yellow, LegendColors.green]}\n                                    keyValues={['death', 'current', 'recovered']}\n                                    legend={[chartTitles.recovered, chartTitles.currentPositive, chartTitles.died]}\n                                    data={TotalCasesRepartitionData().repartition}/>\n\n                        }\n                        <Text style={styles.chartDescription}>{this.state.totalChartDescription}</Text>\n                    </View>\n\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardBig]}>\n                        <Text style={styles.chartTitle}>{this.state.positiveChartTitle}</Text>\n                        <View style={[{flexDirection: \"row\"}]}>\n                            <Text style={[styles.chartManipulationDescription]}>\n                                {dataDescription.showPercentage}\n                            </Text>\n                            <Switch\n                                key={4}\n                                style={{marginLeft: 6}}\n                                onValueChange={() => this.positiveSwitchChange()}\n                                value={this.state.percentageForCurrent}\n                            />\n                        </View>\n\n                        {\n                            this.state.percentageForCurrent ?\n                                <StackedAreaChart\n                                    key={0}\n                                    color={LegendColors.neutral}\n                                    colors={[LegendColors.purple, LegendColors.orange, LegendColors.teal]}\n                                    keyValues={['critical', 'hospitalized', 'homeQuarantine']}\n                                    legend={[chartTitles.positiveHomeQuarantine, chartTitles.hospitalizedWithSymptoms, chartTitles.critical]}\n                                    data={PositiveRepartitionData().repartitionPercentage}/>\n                                :\n                                <StackedAreaChart\n                                    key={1}\n                                    color={LegendColors.neutral}\n                                    colors={[LegendColors.purple, LegendColors.orange, LegendColors.teal]}\n                                    keyValues={['critical', 'hospitalized', 'homeQuarantine']}\n                                    legend={[chartTitles.positiveHomeQuarantine, chartTitles.hospitalizedWithSymptoms, chartTitles.critical]}\n                                    data={PositiveRepartitionData().repartitionAbsolute}/>\n\n                        }\n                        <Text style={styles.chartDescription}>{this.state.positiveChartDescription}</Text>\n                    </View>\n                </>\n\n            </MainScrollableContents>\n        )\n    }\n\n}\n\nexport default RepartitionComponent;","/**\n * covid19_dashboard copyright © 2021\n * Created by mauromarini on 26/01/2021\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\nimport React from \"react\";\nimport {screenTitles} from \"../contents/strings\";\nimport ScreenContainer from \"../components/screenContainer\";\nimport RepartitionComponent from \"../components/repartition/repartitionComponent\";\n\n\nfunction RepartitionScreen({ navigation }) {\n\n    return (\n        <ScreenContainer title={screenTitles.repartition} component={<RepartitionComponent/>}/>\n    );\n}\n\nexport default RepartitionScreen;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 12/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\nimport {infoMenuDescriptions, infoMenuTitles} from \"./strings\";\nimport RemoteUrls from \"./urls\";\n\nexport const menuLinks = [\n    {\n        icon: 'chart-timeline-variant',\n        title: infoMenuTitles.dashboard_covid_vaccine,\n        description: infoMenuDescriptions.dashboard_covid_vaccine,\n        url: RemoteUrls.dashboard_covid_vaccine\n    },\n    {\n        icon: 'gift-outline',\n        title: infoMenuTitles.donate,\n        description: infoMenuDescriptions.donate,\n        url: RemoteUrls.donate\n    },\n    {\n        icon: 'email-outline',\n        title: infoMenuTitles.contact,\n        description: infoMenuDescriptions.contact,\n        url: RemoteUrls.contact\n    },\n    {\n        icon: 'xml',\n        title: infoMenuTitles.repository,\n        description: infoMenuDescriptions.repository,\n        url: RemoteUrls.repository\n    },\n    {\n        icon: 'trending-down',\n        title: infoMenuTitles.data,\n        description: infoMenuDescriptions.data,\n        url: RemoteUrls.data\n    },\n]","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 12/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {Component} from 'react';\nimport MainScrollableContents from \"../mainScrollableContainer\";\nimport {styles} from \"../../theme/style\";\nimport {Text, View} from \"react-native\";\nimport {appInfo, infoMenuTitles} from \"../../contents/strings\";\nimport {List, Divider} from 'react-native-paper';\nimport Colors from \"../../theme/colors\";\nimport {menuLinks} from \"../../contents/infoMenu\";\nimport {openLink} from \"../../../utils/linking\";\nimport darkMode from \"../../theme/darkModeDetector\";\n\nclass InfoComponent extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        return (\n            <MainScrollableContents>\n                <>\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardBig, {\n                        paddingTop: 0,\n                        paddingLeft: 0,\n                        paddingRight: 0\n                    }]}>\n                        <Text style={[styles.infoDescription]}>\n                            {appInfo.description}\n                        </Text>\n                    </View>\n\n                    <View style={[styles.cardGeneric, styles.cardShadow, styles.cardBig, {\n                        paddingTop: 0,\n                        paddingLeft: 0,\n                        paddingRight: 0\n                    }]}>\n                        <List.Section>\n                            <List.Subheader style={{color: (darkMode() ? Colors.darkMode_basic : Colors.basic)}}>{infoMenuTitles.sectionLinks}</List.Subheader>\n                            {\n                                menuLinks.map((item, i) => (\n                                    <>\n                                        <List.Item\n                                            titleStyle={{color: (darkMode() ? Colors.darkMode_basic : Colors.basic)}}\n                                            title={item.title}\n                                            descriptionStyle={{color: (darkMode() ? Colors.darkMode_basic : Colors.basic)}}\n                                            description={item.description}\n                                            onPress={() => openLink(item.url)}\n                                            left={() => <List.Icon color={(darkMode() ? Colors.darkMode_icons : Colors.icons)} icon={item.icon}/>}\n                                            right={() => <List.Icon color={(darkMode() ? Colors.darkMode_icons : Colors.icons)} icon=\"chevron-right\"/>}\n                                        />\n                                        <Divider inset={true}/>\n                                    </>\n                                ))\n                            }\n\n                        </List.Section>\n                        <Text style={[styles.chartDescription, {color: (darkMode() ? Colors.darkMode_icons : Colors.icons)}]}>\n                            {appInfo.name + ' - ' + appInfo.version}\n                        </Text>\n                        <Text style={[styles.chartDescription, {marginTop: 5, color: (darkMode() ? Colors.darkMode_icons : Colors.icons)}]}>\n                            {'copyright © 2020 ' + appInfo.author }\n                        </Text>\n                    </View>\n                </>\n            </MainScrollableContents>\n        )\n    }\n\n}\n\nexport default InfoComponent;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 12/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React from 'react';\nimport {Linking} from 'react-native';\n\n\nexport function openLink(url){\n    Linking.openURL(url).then(r => function () {});\n    return false\n}\n","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 12/08/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React from \"react\";\nimport {screenTitles} from \"../contents/strings\";\nimport ScreenContainer from \"../components/screenContainer\";\nimport InfoComponent from \"../components/info/infoComponent\";\n\nfunction InfoScreen({navigation}) {\n\n    return (\n        <ScreenContainer title={screenTitles.info} component={<InfoComponent/>} />\n    );\n}\n\nexport default InfoScreen;","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 02/09/20\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React, {PureComponent} from 'react';\nimport {StatusBar} from \"expo-status-bar\";\nimport {NavigationContainer} from \"@react-navigation/native\";\nimport {navigationRef} from \"../../utils/rootNavigationRef\";\nimport {styles} from \"../theme/style\";\nimport Colors from \"../theme/colors\";\nimport {dimens} from \"../theme/dimens\";\nimport {screenTitles} from \"../contents/strings\";\nimport LatestUpdateResumeScreen from \"../screens/latestUpdateResumeScreen\";\nimport NewCasesScreen from \"../screens/newCasesScreen\";\nimport CurrentPositiveScreen from \"../screens/currentPositiveScreen\";\nimport RecoveredScreen from \"../screens/recoveredScreen\";\nimport SwabsResumeScreen from \"../screens/swabsScreen\";\nimport DiedScreen from \"../screens/diedScreen\";\nimport RepartitionScreen from \"../screens/dataRepartitionScreen\";\nimport InfoScreen from \"../screens/infoScreen\";\nimport {createDrawerNavigator} from \"@react-navigation/drawer\";\nimport {Dimensions} from \"react-native\";\nimport {Appearance, AppearanceProvider} from 'react-native-appearance';\nimport { Updates } from 'expo';\n\n/* Data */\nimport DataRouter from \"../../logic/dataRouter\";\nimport NewCasesData from \"../../logic/newCasesData\";\n\nconst Drawer = createDrawerNavigator();\n\nconst dimensions = Dimensions.get('window').width;\n\nconst isLargeScreen = dimensions >= dimens.largeScreen;\n\nlet colorScheme = Appearance.getColorScheme();\n\nlet subscription, screenChange;\n\nexport default class GlobalContainer extends PureComponent {\n\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        subscription = Appearance.addChangeListener(({ colorScheme }) => {\n            Updates.reload();\n        });\n        screenChange = Dimensions.addEventListener(\"change\", ({window, screen})=>{\n            Updates.reload();\n        });\n    }\n\n    componentWillUnmount() {\n        subscription.remove();\n        screenChange.remove();\n    }\n\n    render() {\n        return (\n            <AppearanceProvider>\n                <StatusBar/>\n                <NavigationContainer\n                    ref={navigationRef}\n                    style={styles.root}>\n                    <Drawer.Navigator\n                        initialRouteName=\"Resume\"\n                        drawerContentOptions={{\n                            activeTintColor: colorScheme === 'dark' ? Colors.darkMode_drawerSelectedText : Colors.drawerSelectedText,\n                            inactiveTintColor: colorScheme === 'dark' ? Colors.darkMode_navigationInactive : Colors.navigationInactive,\n                            activeBackgroundColor: colorScheme === 'dark' ? Colors.darkMode_drawerSelectedBackground : Colors.drawerSelectedBackground,\n                            drawerBackgroundColor: colorScheme === 'dark' ? Colors.darkMode_basicElevation : Colors.basicElevation,\n                        }}\n                        drawerType={isLargeScreen ? 'permanent' : 'front'}\n                        drawerStyle={[{width: dimens.drawerWidth, borderRightColor: colorScheme === 'dark' ? Colors.darkMode_basicTransparent : Colors.basicTransparent,\n                            backgroundColor: colorScheme === 'dark' ? Colors.darkMode_basicElevation : Colors.basicElevation}]}\n                        overlayColor={isLargeScreen ? \"transparent\" : Colors.navigationOverlay}>\n\n                        <Drawer.Screen name={screenTitles.latestUpdateResume}\n                                       component={LatestUpdateResumeScreen}/>\n                        <Drawer.Screen name={screenTitles.newCases} component={NewCasesScreen}/>\n                        <Drawer.Screen name={screenTitles.currentPositive}\n                                       component={CurrentPositiveScreen}/>\n                        <Drawer.Screen name={screenTitles.recovered} component={RecoveredScreen}/>\n                        <Drawer.Screen name={screenTitles.swab} component={SwabsResumeScreen}/>\n                        <Drawer.Screen name={screenTitles.died} component={DiedScreen}/>\n                        <Drawer.Screen name={screenTitles.repartition} component={RepartitionScreen} />\n                        <Drawer.Screen name={screenTitles.info} component={InfoScreen}/>\n\n                    </Drawer.Navigator>\n                </NavigationContainer>\n            </AppearanceProvider>\n        );\n    }\n}","/**\n * covid19_dashboard copyright © 2020\n * Created by mauromarini on 18/07/2020\n * Repository: http://github.com/marinimau/covid19_dashboard\n * Location: Baratili San Pietro\n */\n\nimport React from 'react';\nimport Async from 'react-async';\nimport Records from \"./src/logic/dataset\";\nimport {enableScreens} from 'react-native-screens';\nimport retrieveData from \"./src/logic/retrieveData\";\nimport ErrorScreen from \"./src/ui/components/loading/error\";\nimport retrieveRegionData from \"./src/logic/retrieveRegionData\";\nimport LoadingComponent from \"./src/ui/components/loading/loading\";\nimport GlobalContainer from \"./src/ui/components/GlobalContainer\";\n\n\nenableScreens();\n\nexport default function App() {\n\n    return (\n        <Async promiseFn={retrieveData}>\n            {({data, err, isLoading}) => {\n                if (isLoading) return <LoadingComponent/>\n                if (err) return <ErrorScreen/>\n                if (data) Records.setRecords(data)\n\n                return (\n                    <Async promiseFn={retrieveRegionData}>\n                        {({data, err, isLoading}) => {\n                            if (isLoading) return <LoadingComponent/>\n                            if (err) return <ErrorScreen/>\n                            if (data) Records.setRegionRecords(data)\n\n                            return (\n                                <GlobalContainer />\n                            )\n                        }}\n                    </Async>\n                )\n            }}\n        </Async>\n    );\n}\n\n\n\n\n\n\n\n\n\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/covid19_dashboard/expo-service-worker.js', { scope: '/covid19_dashboard/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}